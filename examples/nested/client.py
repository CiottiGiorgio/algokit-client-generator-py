# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionWithSigner
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
from algokit_utils import applications, models, protocols, transactions
from algokit_utils.applications import abi as applications_abi

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "a"}, {"type": "uint64", "name": "b"}], "name": "add", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "pay_txn"}], "name": "get_pay_txn_amount", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "_"}, {"type": "pay", "name": "_pay_txn"}, {"type": "appl", "name": "method_call"}], "name": "nested_method_call", "returns": {"type": "byte[]"}, "events": [], "readonly": false, "recommendations": {}}], "name": "NestedContract", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "events": [], "networks": {}, "source": {"approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpleGFtcGxlcy5uZXN0ZWQubmVzdGVkLk5lc3RlZENvbnRyYWN0LmFwcHJvdmFsX3Byb2dyYW06CiAgICBpbnRjYmxvY2sgMSAwCiAgICBieXRlY2Jsb2NrIDB4MTUxZjdjNzUKICAgIGNhbGxzdWIgX19wdXlhX2FyYzRfcm91dGVyX18KICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLm5lc3RlZC5uZXN0ZWQuTmVzdGVkQ29udHJhY3QuX19wdXlhX2FyYzRfcm91dGVyX18oKSAtPiB1aW50NjQ6Cl9fcHV5YV9hcmM0X3JvdXRlcl9fOgogICAgLy8gZXhhbXBsZXMvbmVzdGVkL25lc3RlZC5weTo0CiAgICAvLyBjbGFzcyBOZXN0ZWRDb250cmFjdChBUkM0Q29udHJhY3QpOgogICAgcHJvdG8gMCAxCiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogX19wdXlhX2FyYzRfcm91dGVyX19fYmFyZV9yb3V0aW5nQDcKICAgIHB1c2hieXRlc3MgMHhmZTZiZGY2OSAweDlmZDgzNWY4IDB4MzRhZjM5NDIgLy8gbWV0aG9kICJhZGQodWludDY0LHVpbnQ2NCl1aW50NjQiLCBtZXRob2QgImdldF9wYXlfdHhuX2Ftb3VudChwYXkpdWludDY0IiwgbWV0aG9kICJuZXN0ZWRfbWV0aG9kX2NhbGwoc3RyaW5nLHBheSxhcHBsKWJ5dGVbXSIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIF9fcHV5YV9hcmM0X3JvdXRlcl9fX2FkZF9yb3V0ZUAyIF9fcHV5YV9hcmM0X3JvdXRlcl9fX2dldF9wYXlfdHhuX2Ftb3VudF9yb3V0ZUAzIF9fcHV5YV9hcmM0X3JvdXRlcl9fX25lc3RlZF9tZXRob2RfY2FsbF9yb3V0ZUA0CiAgICBpbnRjXzEgLy8gMAogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19hZGRfcm91dGVAMjoKICAgIC8vIGV4YW1wbGVzL25lc3RlZC9uZXN0ZWQucHk6NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIGV4YW1wbGVzL25lc3RlZC9uZXN0ZWQucHk6NAogICAgLy8gY2xhc3MgTmVzdGVkQ29udHJhY3QoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIGV4YW1wbGVzL25lc3RlZC9uZXN0ZWQucHk6NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGFkZAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fZ2V0X3BheV90eG5fYW1vdW50X3JvdXRlQDM6CiAgICAvLyBleGFtcGxlcy9uZXN0ZWQvbmVzdGVkLnB5OjkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBleGFtcGxlcy9uZXN0ZWQvbmVzdGVkLnB5OjQKICAgIC8vIGNsYXNzIE5lc3RlZENvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMCAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIC8vIGV4YW1wbGVzL25lc3RlZC9uZXN0ZWQucHk6OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGdldF9wYXlfdHhuX2Ftb3VudAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fbmVzdGVkX21ldGhvZF9jYWxsX3JvdXRlQDQ6CiAgICAvLyBleGFtcGxlcy9uZXN0ZWQvbmVzdGVkLnB5OjEzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gZXhhbXBsZXMvbmVzdGVkL25lc3RlZC5weTo0CiAgICAvLyBjbGFzcyBOZXN0ZWRDb250cmFjdChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuIEdyb3VwSW5kZXgKICAgIHB1c2hpbnQgMiAvLyAyCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgYXBwbAogICAgLy8gZXhhbXBsZXMvbmVzdGVkL25lc3RlZC5weToxMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIG5lc3RlZF9tZXRob2RfY2FsbAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYmFyZV9yb3V0aW5nQDc6CiAgICAvLyBleGFtcGxlcy9uZXN0ZWQvbmVzdGVkLnB5OjQKICAgIC8vIGNsYXNzIE5lc3RlZENvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogX19wdXlhX2FyYzRfcm91dGVyX19fYWZ0ZXJfaWZfZWxzZUAxMQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTE6CiAgICAvLyBleGFtcGxlcy9uZXN0ZWQvbmVzdGVkLnB5OjQKICAgIC8vIGNsYXNzIE5lc3RlZENvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzEgLy8gMAogICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMubmVzdGVkLm5lc3RlZC5OZXN0ZWRDb250cmFjdC5hZGQoYTogYnl0ZXMsIGI6IGJ5dGVzKSAtPiBieXRlczoKYWRkOgogICAgLy8gZXhhbXBsZXMvbmVzdGVkL25lc3RlZC5weTo1LTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGFkZChzZWxmLCBhOiBhcmM0LlVJbnQ2NCwgYjogYXJjNC5VSW50NjQpIC0+IGFyYzQuVUludDY0OgogICAgcHJvdG8gMiAxCiAgICAvLyBleGFtcGxlcy9uZXN0ZWQvbmVzdGVkLnB5OjcKICAgIC8vIHJldHVybiBhcmM0LlVJbnQ2NChhLm5hdGl2ZSArIGIubmF0aXZlKQogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgICsKICAgIGl0b2IKICAgIHJldHN1YgoKCi8vIGV4YW1wbGVzLm5lc3RlZC5uZXN0ZWQuTmVzdGVkQ29udHJhY3QuZ2V0X3BheV90eG5fYW1vdW50KHBheV90eG46IHVpbnQ2NCkgLT4gYnl0ZXM6CmdldF9wYXlfdHhuX2Ftb3VudDoKICAgIC8vIGV4YW1wbGVzL25lc3RlZC9uZXN0ZWQucHk6OS0xMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZ2V0X3BheV90eG5fYW1vdW50KHNlbGYsIHBheV90eG46IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKSAtPiBhcmM0LlVJbnQ2NDoKICAgIHByb3RvIDEgMQogICAgLy8gZXhhbXBsZXMvbmVzdGVkL25lc3RlZC5weToxMQogICAgLy8gcmV0dXJuIGFyYzQuVUludDY0KHBheV90eG4uYW1vdW50KQogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBbW91bnQKICAgIGl0b2IKICAgIHJldHN1YgoKCi8vIGV4YW1wbGVzLm5lc3RlZC5uZXN0ZWQuTmVzdGVkQ29udHJhY3QubmVzdGVkX21ldGhvZF9jYWxsKF86IGJ5dGVzLCBfcGF5X3R4bjogdWludDY0LCBtZXRob2RfY2FsbDogdWludDY0KSAtPiBieXRlczoKbmVzdGVkX21ldGhvZF9jYWxsOgogICAgLy8gZXhhbXBsZXMvbmVzdGVkL25lc3RlZC5weToxMy0xNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgbmVzdGVkX21ldGhvZF9jYWxsKAogICAgLy8gICAgIHNlbGYsIF86IGFyYzQuU3RyaW5nLCBfcGF5X3R4bjogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24sIG1ldGhvZF9jYWxsOiBndHhuLkFwcGxpY2F0aW9uQ2FsbFRyYW5zYWN0aW9uCiAgICAvLyApIC0+IGFyYzQuRHluYW1pY0J5dGVzOgogICAgcHJvdG8gMyAxCiAgICAvLyBleGFtcGxlcy9uZXN0ZWQvbmVzdGVkLnB5OjE3CiAgICAvLyByZXR1cm4gYXJjNC5EeW5hbWljQnl0ZXMobWV0aG9kX2NhbGwudHhuX2lkKQogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBUeElECiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcmV0c3ViCg==", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpleGFtcGxlcy5uZXN0ZWQubmVzdGVkLk5lc3RlZENvbnRyYWN0LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [57, 79, 105], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [151], "errorMessage": "can only call when creating"}, {"pc": [60, 82, 108], "errorMessage": "can only call when not creating"}, {"pc": [133], "errorMessage": "transaction type is appl"}, {"pc": [92, 122], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = applications.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: typing.Any | None = None) -> list[typing.Any] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: typing.Any) -> typing.Any:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [convert_dataclass(arg) for arg in method_args] if method_args else None


@dataclasses.dataclass(frozen=True)
class AddArgs:
    """Dataclass for add arguments"""
    a: int
    b: int

@dataclasses.dataclass(frozen=True)
class GetPayTxnAmountArgs:
    """Dataclass for get_pay_txn_amount arguments"""
    pay_txn: transactions.AppMethodCallTransactionArgument

@dataclasses.dataclass(frozen=True)
class NestedMethodCallArgs:
    """Dataclass for nested_method_call arguments"""
    _: str
    _pay_txn: transactions.AppMethodCallTransactionArgument
    method_call: transactions.AppMethodCallTransactionArgument


class NestedContractParams:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client
    def add(
        self,
        args: tuple[int, int] | AddArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        return self.app_client.params.call(applications.AppClientMethodCallWithSendParams(
                method="add(uint64,uint64)uint64",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def get_pay_txn_amount(
        self,
        args: tuple[transactions.AppMethodCallTransactionArgument] | GetPayTxnAmountArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        return self.app_client.params.call(applications.AppClientMethodCallWithSendParams(
                method="get_pay_txn_amount(pay)uint64",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def nested_method_call(
        self,
        args: tuple[str, transactions.AppMethodCallTransactionArgument, transactions.AppMethodCallTransactionArgument] | NestedMethodCallArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        return self.app_client.params.call(applications.AppClientMethodCallWithSendParams(
                method="nested_method_call(string,pay,appl)byte[]",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def clear_state(self, params: applications.AppClientBareCallWithSendParams | None = None) -> transactions.AppCallParams:
        return self.app_client.params.bare.clear_state(params)


class NestedContractCreateTransactionParams:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client
    def add(
        self,
        args: tuple[int, int] | AddArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.BuiltTransactions:
        method_args = _parse_abi_args(args)
        return self.app_client.create_transaction.call(applications.AppClientMethodCallWithSendParams(
                method="add(uint64,uint64)uint64",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def get_pay_txn_amount(
        self,
        args: tuple[transactions.AppMethodCallTransactionArgument] | GetPayTxnAmountArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.BuiltTransactions:
        method_args = _parse_abi_args(args)
        return self.app_client.create_transaction.call(applications.AppClientMethodCallWithSendParams(
                method="get_pay_txn_amount(pay)uint64",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def nested_method_call(
        self,
        args: tuple[str, transactions.AppMethodCallTransactionArgument, transactions.AppMethodCallTransactionArgument] | NestedMethodCallArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.BuiltTransactions:
        method_args = _parse_abi_args(args)
        return self.app_client.create_transaction.call(applications.AppClientMethodCallWithSendParams(
                method="nested_method_call(string,pay,appl)byte[]",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def clear_state(self, params: applications.AppClientBareCallWithSendParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(params)


class NestedContractSend:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client
    def add(
        self,
        args: tuple[int, int] | AddArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        response = self.app_client.send.call(applications.AppClientMethodCallWithSendParams(
                method="add(uint64,uint64)uint64",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))
        return transactions.SendAppTransactionResult[int](**dataclasses.asdict(response))

    def get_pay_txn_amount(
        self,
        args: tuple[transactions.AppMethodCallTransactionArgument] | GetPayTxnAmountArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        response = self.app_client.send.call(applications.AppClientMethodCallWithSendParams(
                method="get_pay_txn_amount(pay)uint64",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))
        return transactions.SendAppTransactionResult[int](**dataclasses.asdict(response))

    def nested_method_call(
        self,
        args: tuple[str, transactions.AppMethodCallTransactionArgument, transactions.AppMethodCallTransactionArgument] | NestedMethodCallArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.SendAppTransactionResult[bytes | bytearray]:
        method_args = _parse_abi_args(args)
        response = self.app_client.send.call(applications.AppClientMethodCallWithSendParams(
                method="nested_method_call(string,pay,appl)byte[]",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))
        return transactions.SendAppTransactionResult[bytes | bytearray](**dataclasses.asdict(response))

    def clear_state(self, params: applications.AppClientBareCallWithSendParams | None = None) -> transactions.SendAppTransactionResult[applications_abi.ABIReturn]:
        return self.app_client.send.bare.clear_state(params)


class NestedContractState:
    """Methods to access state for the current NestedContract app"""

    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client

class NestedContractClient:
    """Client for interacting with NestedContract smart contract"""

    @typing.overload
    def __init__(self, app_client: applications.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: protocols.AlgorandClientProtocol,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: applications.AppClient | None = None,
        *,
        algorand: protocols.AlgorandClientProtocol | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = applications.AppClient(
                applications.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = NestedContractParams(self.app_client)
        self.create_transaction = NestedContractCreateTransactionParams(self.app_client)
        self.send = NestedContractSend(self.app_client)
        self.state = NestedContractState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: protocols.AlgorandClientProtocol,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: applications.AppLookup | None = None,
    ) -> "NestedContractClient":
        return NestedContractClient(
            applications.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: protocols.AlgorandClientProtocol,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "NestedContractClient":
        return NestedContractClient(
            applications.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> applications.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> protocols.AlgorandClientProtocol:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "NestedContractClient":
        return NestedContractClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "NestedContractComposer":
        return NestedContractComposer(self)

    def decode_return_value(
        self,
        method: str,
        return_value: applications_abi.ABIReturn | None
    ) -> applications_abi.ABIValue | applications_abi.ABIStruct | None:
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        return return_value.get_arc56_value(arc56_method, self.app_spec.structs)


@dataclasses.dataclass(frozen=True)
class NestedContractBareCallCreateParams(applications.AppClientCreateSchema, applications.AppClientBareCallParams, applications.BaseOnCompleteParams[typing.Literal[OnComplete.NoOpOC]]):
    """Parameters for creating NestedContract contract using bare calls"""

    def to_algokit_utils_params(self) -> applications.AppClientBareCallCreateParams:
        return applications.AppClientBareCallCreateParams(**self.__dict__)

class NestedContractFactory(applications.TypedAppFactoryProtocol):
    """Factory for deploying and managing NestedContractClient smart contracts"""

    def __init__(
        self,
        algorand: protocols.AlgorandClientProtocol,
        *,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        updatable: bool | None = None,
        deletable: bool | None = None,
        deploy_time_params: models.TealTemplateParams | None = None,
    ):
        self.app_factory = applications.AppFactory(
            params=applications.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                updatable=updatable,
                deletable=deletable,
                deploy_time_params=deploy_time_params,
            )
        )
        self.params = NestedContractFactoryParams(self.app_factory)
        self.create_transaction = NestedContractFactoryCreateTransaction(self.app_factory)
        self.send = NestedContractFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name

    @property
    def app_spec(self) -> applications.Arc56Contract:
        return self.app_factory.app_spec

    @property
    def algorand(self) -> protocols.AlgorandClientProtocol:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        deploy_time_params: models.TealTemplateParams | None = None,
        on_update: applications.OnUpdate = applications.OnUpdate.Fail,
        on_schema_break: applications.OnSchemaBreak = applications.OnSchemaBreak.Fail,
        create_params: NestedContractBareCallCreateParams | None = None,
        existing_deployments: applications.AppLookup | None = None,
        ignore_cache: bool = False,
        updatable: bool | None = None,
        deletable: bool | None = None,
        app_name: str | None = None,
        max_rounds_to_wait: int | None = None,
        suppress_log: bool = False,
        populate_app_call_resources: bool = False,
    ) -> tuple[NestedContractClient, applications.AppFactoryDeployResponse]:
        deploy_response = self.app_factory.deploy(
            deploy_time_params=deploy_time_params,
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            updatable=updatable,
            deletable=deletable,
            app_name=app_name,
            max_rounds_to_wait=max_rounds_to_wait,
            suppress_log=suppress_log,
            populate_app_call_resources=populate_app_call_resources,
        )

        return NestedContractClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: applications.AppLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> NestedContractClient:
        """Get an app client by creator address and name"""
        return NestedContractClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> NestedContractClient:
        """Get an app client by app ID"""
        return NestedContractClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class NestedContractFactoryParams:
    """Parameters for creating transactions for NestedContract contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory
        self.create = NestedContractFactoryCreateParams(app_factory)
        self.deploy_update = NestedContractFactoryUpdateParams(app_factory)
        self.deploy_delete = NestedContractFactoryDeleteParams(app_factory)

class NestedContractFactoryCreateParams:
    """Parameters for 'create' operations of NestedContract contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (typing.Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> transactions.AppCreateParams:
        """Creates an instance using a bare call"""
        return self.app_factory.params.bare.create(
            applications.AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )

    def add(
            self,
            args: tuple[int, int] | AddArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.AppCreateMethodCallParams:
            """Creates a new instance using the add(uint64,uint64)uint64 ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.params.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="add(uint64,uint64)uint64",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

    def get_pay_txn_amount(
            self,
            args: tuple[transactions.AppMethodCallTransactionArgument] | GetPayTxnAmountArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.AppCreateMethodCallParams:
            """Creates a new instance using the get_pay_txn_amount(pay)uint64 ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.params.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="get_pay_txn_amount(pay)uint64",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

    def nested_method_call(
            self,
            args: tuple[str, transactions.AppMethodCallTransactionArgument, transactions.AppMethodCallTransactionArgument] | NestedMethodCallArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.AppCreateMethodCallParams:
            """Creates a new instance using the nested_method_call(string,pay,appl)byte[] ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.params.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="nested_method_call(string,pay,appl)byte[]",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

class NestedContractFactoryUpdateParams:
    """Parameters for 'update' operations of NestedContract contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (typing.Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> transactions.AppUpdateParams:
        """Updates an instance using a bare call"""
        return self.app_factory.params.bare.deploy_update(
            applications.AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )

class NestedContractFactoryDeleteParams:
    """Parameters for 'delete' operations of NestedContract contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (typing.Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> transactions.AppDeleteParams:
        """Deletes an instance using a bare call"""
        return self.app_factory.params.bare.deploy_delete(
            applications.AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )


class NestedContractFactoryCreateTransaction:
    """Create transactions for NestedContract contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory
        self.create = NestedContractFactoryCreateTransactionCreate(app_factory)

    def add(
            self,
            args: tuple[int, int] | AddArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.BuiltTransactions:
            """Creates a transaction using the add(uint64,uint64)uint64 ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.create_transaction.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="add(uint64,uint64)uint64",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

    def get_pay_txn_amount(
            self,
            args: tuple[transactions.AppMethodCallTransactionArgument] | GetPayTxnAmountArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.BuiltTransactions:
            """Creates a transaction using the get_pay_txn_amount(pay)uint64 ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.create_transaction.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="get_pay_txn_amount(pay)uint64",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

    def nested_method_call(
            self,
            args: tuple[str, transactions.AppMethodCallTransactionArgument, transactions.AppMethodCallTransactionArgument] | NestedMethodCallArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.BuiltTransactions:
            """Creates a transaction using the nested_method_call(string,pay,appl)byte[] ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.create_transaction.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="nested_method_call(string,pay,appl)byte[]",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )


class NestedContractFactoryCreateTransactionCreate:
    """Create new instances of NestedContract contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (typing.Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        return self.app_factory.create_transaction.bare.create(
            applications.AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )


class NestedContractFactorySend:
    """Send calls to NestedContract contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory
        self.create = NestedContractFactorySendCreate(app_factory)


class NestedContractFactorySendCreate:
    """Send create calls to NestedContract contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (typing.Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> tuple[NestedContractClient, transactions.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        result = self.app_factory.send.bare.create(
            applications.AppFactoryCreateWithSendParams(on_complete=on_complete, **kwargs)
        )
        return NestedContractClient(result[0]), result[1]


class NestedContractComposer:
    """Composer for creating transaction groups for NestedContract contract calls"""

    def __init__(self, client: "NestedContractClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[applications_abi.ABIReturn | None], typing.Any] | None] = []

    def add(
        self,
        args: tuple[int, int] | AddArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> "NestedContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.add(
                args=args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "add(uint64,uint64)uint64", v
            )
        )
        return self

    def get_pay_txn_amount(
        self,
        args: tuple[transactions.AppMethodCallTransactionArgument] | GetPayTxnAmountArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> "NestedContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_pay_txn_amount(
                args=args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_pay_txn_amount(pay)uint64", v
            )
        )
        return self

    def nested_method_call(
        self,
        args: tuple[str, transactions.AppMethodCallTransactionArgument, transactions.AppMethodCallTransactionArgument] | NestedMethodCallArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> "NestedContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.nested_method_call(
                args=args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "nested_method_call(string,pay,appl)byte[]", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
    ) -> "NestedContractComposer":
        self._composer.add_app_call(
            self.client.params.clear_state(
                applications.AppClientBareCallWithSendParams(
                    account_references=account_references,
                    app_references=app_references,
                    asset_references=asset_references,
                    box_references=box_references,
                    extra_fee=extra_fee,
                    first_valid_round=first_valid_round,
                    lease=lease,
                    max_fee=max_fee,
                    note=note,
                    rekey_to=rekey_to,
                    sender=sender,
                    signer=signer,
                    static_fee=static_fee,
                    validity_window=validity_window,
                    last_valid_round=last_valid_round,
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "NestedContractComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> transactions.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: int | None = None,
    ) -> transactions.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        max_rounds_to_wait: int | None = None,
        suppress_log: bool | None = None,
        populate_app_call_resources: bool | None = None,
    ) -> transactions.SendAtomicTransactionComposerResults:
        return self._composer.send(
            max_rounds_to_wait=max_rounds_to_wait,
            suppress_log=suppress_log,
            populate_app_call_resources=populate_app_call_resources,
        )
