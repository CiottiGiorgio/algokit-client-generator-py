# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionWithSigner
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
from algokit_utils import applications, models, protocols, transactions, clients
from algokit_utils.applications import abi as applications_abi
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [], "bareActions": {"call": ["DeleteApplication", "UpdateApplication"], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "name"}], "name": "hello", "returns": {"type": "string"}, "desc": "Returns Hello, {name}", "events": []}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "name"}], "name": "hello_world_check", "returns": {"type": "void"}, "desc": "Asserts {name} is \"World\"", "events": []}], "name": "HelloWorldApp", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "source": {"approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMQpieXRlY2Jsb2NrIDB4CnR4biBOdW1BcHBBcmdzCmludGNfMCAvLyAwCj09CmJueiBtYWluX2w2CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MDJiZWNlMTEgLy8gImhlbGxvKHN0cmluZylzdHJpbmciCj09CmJueiBtYWluX2w1CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4YmY5YzFlZGYgLy8gImhlbGxvX3dvcmxkX2NoZWNrKHN0cmluZyl2b2lkIgo9PQpibnogbWFpbl9sNAplcnIKbWFpbl9sNDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBoZWxsb3dvcmxkY2hlY2tjYXN0ZXJfNQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBoZWxsb2Nhc3Rlcl80CmludGNfMSAvLyAxCnJldHVybgptYWluX2w2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2wxMgp0eG4gT25Db21wbGV0aW9uCnB1c2hpbnQgNCAvLyBVcGRhdGVBcHBsaWNhdGlvbgo9PQpibnogbWFpbl9sMTEKdHhuIE9uQ29tcGxldGlvbgpwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KPT0KYm56IG1haW5fbDEwCmVycgptYWluX2wxMDoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KYXNzZXJ0CmNhbGxzdWIgZGVsZXRlXzEKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDExOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiB1cGRhdGVfMAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTI6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCj09CmFzc2VydAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIHVwZGF0ZQp1cGRhdGVfMDoKcHJvdG8gMCAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKcHVzaGludCBUTVBMX1VQREFUQUJMRSAvLyBUTVBMX1VQREFUQUJMRQovLyBDaGVjayBhcHAgaXMgdXBkYXRhYmxlCmFzc2VydApyZXRzdWIKCi8vIGRlbGV0ZQpkZWxldGVfMToKcHJvdG8gMCAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKcHVzaGludCBUTVBMX0RFTEVUQUJMRSAvLyBUTVBMX0RFTEVUQUJMRQovLyBDaGVjayBhcHAgaXMgZGVsZXRhYmxlCmFzc2VydApyZXRzdWIKCi8vIGhlbGxvCmhlbGxvXzI6CnByb3RvIDEgMQpieXRlY18wIC8vICIiCnB1c2hieXRlcyAweDQ4NjU2YzZjNmYyYzIwIC8vICJIZWxsbywgIgpmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKY29uY2F0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApsZW4KaXRvYgpleHRyYWN0IDYgMApmcmFtZV9kaWcgMApjb25jYXQKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gaGVsbG9fd29ybGRfY2hlY2sKaGVsbG93b3JsZGNoZWNrXzM6CnByb3RvIDEgMApmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKcHVzaGJ5dGVzIDB4NTc2ZjcyNmM2NCAvLyAiV29ybGQiCj09CmFzc2VydApyZXRzdWIKCi8vIGhlbGxvX2Nhc3RlcgpoZWxsb2Nhc3Rlcl80Ogpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKY2FsbHN1YiBoZWxsb18yCmZyYW1lX2J1cnkgMApwdXNoYnl0ZXMgMHgxNTFmN2M3NSAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBoZWxsb193b3JsZF9jaGVja19jYXN0ZXIKaGVsbG93b3JsZGNoZWNrY2FzdGVyXzU6CnByb3RvIDAgMApieXRlY18wIC8vICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgaGVsbG93b3JsZGNoZWNrXzMKcmV0c3Vi", "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"}}"""
APP_SPEC = applications.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: typing.Any | None = None) -> list[typing.Any] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: typing.Any) -> typing.Any:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, transactions.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

ON_COMPLETE_TYPES = typing.Literal[
    OnComplete.NoOpOC,
    OnComplete.UpdateApplicationOC,
    OnComplete.DeleteApplicationOC,
    OnComplete.OptInOC,
    OnComplete.CloseOutOC,
]


@dataclasses.dataclass(frozen=True, kw_only=True)
class HelloArgs:
    """Dataclass for hello arguments"""
    name: str

@dataclasses.dataclass(frozen=True, kw_only=True)
class HelloWorldCheckArgs:
    """Dataclass for hello_world_check arguments"""
    name: str


class _HelloWorldAppUpdate:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client

    def bare(
        self, params: applications.AppClientBareCallWithCompilationAndSendParams | None = None
    ) -> transactions.AppUpdateParams:
        return self.app_client.params.bare.update(params)


class _HelloWorldAppDelete:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client

    def bare(
        self, params: applications.AppClientBareCallWithSendParams | None = None
    ) -> transactions.AppCallParams:
        return self.app_client.params.bare.delete(params)


class HelloWorldAppParams:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client
    @property
    def update(self) -> "_HelloWorldAppUpdate":
        return _HelloWorldAppUpdate(self.app_client)

    @property
    def delete(self) -> "_HelloWorldAppDelete":
        return _HelloWorldAppDelete(self.app_client)
    def hello(
        self,
        args: tuple[str] | HelloArgs,    *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        populate_app_call_resources: bool = False,
        cover_app_call_inner_txn_fees: bool = False,
        
    ) -> transactions.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        return self.app_client.params.call(applications.AppClientMethodCallWithSendParams(
                method="hello(string)string",
                args=method_args,
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                populate_app_call_resources=populate_app_call_resources,
                cover_app_call_inner_txn_fees=cover_app_call_inner_txn_fees,
                
            ))

    def hello_world_check(
        self,
        args: tuple[str] | HelloWorldCheckArgs,    *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        populate_app_call_resources: bool = False,
        cover_app_call_inner_txn_fees: bool = False,
        
    ) -> transactions.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        return self.app_client.params.call(applications.AppClientMethodCallWithSendParams(
                method="hello_world_check(string)void",
                args=method_args,
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                populate_app_call_resources=populate_app_call_resources,
                cover_app_call_inner_txn_fees=cover_app_call_inner_txn_fees,
                
            ))

    def clear_state(
        self,
        params: applications.AppClientBareCallWithSendParams | None = None
    ) -> transactions.AppCallParams:
        return self.app_client.params.bare.clear_state(params)


class _HelloWorldAppUpdateTransaction:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client

    def bare(self, params: applications.AppClientBareCallWithCompilationAndSendParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.update(params)


class _HelloWorldAppDeleteTransaction:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client

    def bare(self, params: applications.AppClientBareCallWithSendParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.delete(params)


class HelloWorldAppCreateTransactionParams:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client
    @property
    def update(self) -> "_HelloWorldAppUpdateTransaction":
        return _HelloWorldAppUpdateTransaction(self.app_client)

    @property
    def delete(self) -> "_HelloWorldAppDeleteTransaction":
        return _HelloWorldAppDeleteTransaction(self.app_client)
    def hello(
        self,
        args: tuple[str] | HelloArgs,    *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        populate_app_call_resources: bool = False,
        cover_app_call_inner_txn_fees: bool = False,
        
    ) -> transactions.BuiltTransactions:
        method_args = _parse_abi_args(args)
        return self.app_client.create_transaction.call(applications.AppClientMethodCallWithSendParams(
                method="hello(string)string",
                args=method_args,
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                populate_app_call_resources=populate_app_call_resources,
                cover_app_call_inner_txn_fees=cover_app_call_inner_txn_fees,
                
            ))

    def hello_world_check(
        self,
        args: tuple[str] | HelloWorldCheckArgs,    *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        populate_app_call_resources: bool = False,
        cover_app_call_inner_txn_fees: bool = False,
        
    ) -> transactions.BuiltTransactions:
        method_args = _parse_abi_args(args)
        return self.app_client.create_transaction.call(applications.AppClientMethodCallWithSendParams(
                method="hello_world_check(string)void",
                args=method_args,
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                populate_app_call_resources=populate_app_call_resources,
                cover_app_call_inner_txn_fees=cover_app_call_inner_txn_fees,
                
            ))

    def clear_state(
        self,
        params: applications.AppClientBareCallWithSendParams | None = None
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(params)


class _HelloWorldAppUpdateSend:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client

    def bare(self, params: applications.AppClientBareCallWithCompilationAndSendParams | None = None) -> transactions.SendAppTransactionResult:
        return self.app_client.send.bare.update(params)


class _HelloWorldAppDeleteSend:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client

    def bare(self, params: applications.AppClientBareCallWithSendParams | None = None) -> transactions.SendAppTransactionResult:
        return self.app_client.send.bare.delete(params)


class HelloWorldAppSend:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client
    @property
    def update(self) -> "_HelloWorldAppUpdateSend":
        return _HelloWorldAppUpdateSend(self.app_client)

    @property
    def delete(self) -> "_HelloWorldAppDeleteSend":
        return _HelloWorldAppDeleteSend(self.app_client)
    def hello(
        self,
        args: tuple[str] | HelloArgs,    *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        populate_app_call_resources: bool = False,
        cover_app_call_inner_txn_fees: bool = False,
        
    ) -> transactions.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        response = self.app_client.send.call(applications.AppClientMethodCallWithSendParams(
                method="hello(string)string",
                args=method_args,
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                populate_app_call_resources=populate_app_call_resources,
                cover_app_call_inner_txn_fees=cover_app_call_inner_txn_fees,
                
            ))
        parsed_response = response
        return typing.cast(transactions.SendAppTransactionResult[str], parsed_response)

    def hello_world_check(
        self,
        args: tuple[str] | HelloWorldCheckArgs,    *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        populate_app_call_resources: bool = False,
        cover_app_call_inner_txn_fees: bool = False,
        
    ) -> transactions.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        response = self.app_client.send.call(applications.AppClientMethodCallWithSendParams(
                method="hello_world_check(string)void",
                args=method_args,
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                populate_app_call_resources=populate_app_call_resources,
                cover_app_call_inner_txn_fees=cover_app_call_inner_txn_fees,
                
            ))
        parsed_response = response
        return typing.cast(transactions.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: applications.AppClientBareCallWithSendParams | None = None
    ) -> transactions.SendAppTransactionResult[applications_abi.ABIReturn]:
        return self.app_client.send.bare.clear_state(params)


class HelloWorldAppState:
    """Methods to access state for the current HelloWorldApp app"""

    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client

class HelloWorldAppClient:
    """Client for interacting with HelloWorldApp smart contract"""

    @typing.overload
    def __init__(self, app_client: applications.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: applications.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = applications.AppClient(
                applications.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = HelloWorldAppParams(self.app_client)
        self.create_transaction = HelloWorldAppCreateTransactionParams(self.app_client)
        self.send = HelloWorldAppSend(self.app_client)
        self.state = HelloWorldAppState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: applications.AppLookup | None = None,
    ) -> "HelloWorldAppClient":
        return HelloWorldAppClient(
            applications.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "HelloWorldAppClient":
        return HelloWorldAppClient(
            applications.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> applications.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "HelloWorldAppClient":
        return HelloWorldAppClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "HelloWorldAppComposer":
        return HelloWorldAppComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["hello(string)string"],
        return_value: applications_abi.ABIReturn | None
    ) -> str | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["hello_world_check(string)void"],
        return_value: applications_abi.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: applications_abi.ABIReturn | None
    ) -> applications_abi.ABIValue | applications_abi.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: applications_abi.ABIReturn | None
    ) -> applications_abi.ABIValue | applications_abi.ABIStruct | None | str:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class HelloWorldAppBareCallCreateParams(applications.AppClientBareCallCreateParams):
    """Parameters for creating HelloWorldApp contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> applications.AppClientBareCallCreateParams:
        return applications.AppClientBareCallCreateParams(**self.__dict__)

@dataclasses.dataclass(frozen=True)
class HelloWorldAppBareCallUpdateParams(applications.AppClientBareCallCreateParams):
    """Parameters for calling HelloWorldApp contract with bare calls"""
    on_complete: typing.Literal[OnComplete.UpdateApplicationOC] | None = None

    def to_algokit_utils_params(self) -> applications.AppClientBareCallParams:
        return applications.AppClientBareCallParams(**self.__dict__)

@dataclasses.dataclass(frozen=True)
class HelloWorldAppBareCallDeleteParams(applications.AppClientBareCallCreateParams):
    """Parameters for calling HelloWorldApp contract with bare calls"""
    on_complete: typing.Literal[OnComplete.DeleteApplicationOC] | None = None

    def to_algokit_utils_params(self) -> applications.AppClientBareCallParams:
        return applications.AppClientBareCallParams(**self.__dict__)

class HelloWorldAppFactory(protocols.TypedAppFactoryProtocol[HelloWorldAppBareCallCreateParams, HelloWorldAppBareCallUpdateParams, HelloWorldAppBareCallDeleteParams]):
    """Factory for deploying and managing HelloWorldAppClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        updatable: bool | None = None,
        deletable: bool | None = None,
        deploy_time_params: models.TealTemplateParams | None = None,
    ):
        self.app_factory = applications.AppFactory(
            params=applications.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                updatable=updatable,
                deletable=deletable,
                deploy_time_params=deploy_time_params,
            )
        )
        self.params = HelloWorldAppFactoryParams(self.app_factory)
        self.create_transaction = HelloWorldAppFactoryCreateTransaction(self.app_factory)
        self.send = HelloWorldAppFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> applications.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        deploy_time_params: models.TealTemplateParams | None = None,
        on_update: applications.OnUpdate = applications.OnUpdate.Fail,
        on_schema_break: applications.OnSchemaBreak = applications.OnSchemaBreak.Fail,
        create_params: HelloWorldAppBareCallCreateParams | None = None,
        update_params: HelloWorldAppBareCallUpdateParams | None = None,
        delete_params: HelloWorldAppBareCallDeleteParams | None = None,
        existing_deployments: applications.AppLookup | None = None,
        ignore_cache: bool = False,
        updatable: bool | None = None,
        deletable: bool | None = None,
        app_name: str | None = None,
        max_rounds_to_wait: int | None = None,
        suppress_log: bool = False,
        populate_app_call_resources: bool = False,
        cover_app_call_inner_txn_fees: bool = False,
    ) -> tuple[HelloWorldAppClient, applications.AppFactoryDeployResponse]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            deploy_time_params=deploy_time_params,
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            updatable=updatable,
            deletable=deletable,
            app_name=app_name,
            max_rounds_to_wait=max_rounds_to_wait,
            suppress_log=suppress_log,
            populate_app_call_resources=populate_app_call_resources,
            cover_app_call_inner_txn_fees=cover_app_call_inner_txn_fees,
        )

        return HelloWorldAppClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: applications.AppLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> HelloWorldAppClient:
        """Get an app client by creator address and name"""
        return HelloWorldAppClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> HelloWorldAppClient:
        """Get an app client by app ID"""
        return HelloWorldAppClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class HelloWorldAppFactoryParams:
    """Parameters for creating transactions for HelloWorldApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory
        self.create = HelloWorldAppFactoryCreateParams(app_factory)
        self.update = HelloWorldAppFactoryUpdateParams(app_factory)
        self.delete = HelloWorldAppFactoryDeleteParams(app_factory)

class HelloWorldAppFactoryCreateParams:
    """Parameters for 'create' operations of HelloWorldApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        extra_program_pages: int | None = None,
        schema: transactions.AppCreateSchema | None = None,
        signer: TransactionSigner | None = None,
        rekey_to: str | None = None,
        lease: bytes | None = None,
        static_fee: models.AlgoAmount | None = None,
        extra_fee: models.AlgoAmount | None = None,
        max_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        sender: str | None = None,
        note: bytes | None = None,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        deploy_time_params: models.TealTemplateParams | None = None,
        updatable: bool | None = None,
        deletable: bool | None = None,
        on_complete: (ON_COMPLETE_TYPES | None) = None,
    ) -> transactions.AppCreateParams:
        """Creates an instance using a bare call"""
        params = {
            k: v for k, v in locals().items()
            if k != 'self' and v is not None
        }
        return self.app_factory.params.bare.create(
            applications.AppFactoryCreateParams(**params)
        )

    def hello(
        self,
        args: tuple[str] | HelloArgs,
            *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        first_valid_round: int | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        last_valid_round: int | None = None,
        extra_program_pages: int | None = None,
        schema: transactions.AppCreateSchema | None = None,
        deploy_time_params: models.TealTemplateParams | None = None,
        updatable: bool | None = None,
        deletable: bool | None = None,
        on_complete: (ON_COMPLETE_TYPES | None) = None
    ) -> transactions.AppCreateMethodCallParams:
        """Creates a new instance using the hello(string)string ABI method"""
        params = {
            k: v for k, v in locals().items()
            if k != 'self' and v is not None
        }
        return self.app_factory.params.create(
            applications.AppFactoryCreateMethodCallParams(
                **{
                **params,
                "method": "hello(string)string",
                "args": _parse_abi_args(args),
                }
            )
        )

    def hello_world_check(
        self,
        args: tuple[str] | HelloWorldCheckArgs,
            *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        first_valid_round: int | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        last_valid_round: int | None = None,
        extra_program_pages: int | None = None,
        schema: transactions.AppCreateSchema | None = None,
        deploy_time_params: models.TealTemplateParams | None = None,
        updatable: bool | None = None,
        deletable: bool | None = None,
        on_complete: (ON_COMPLETE_TYPES | None) = None
    ) -> transactions.AppCreateMethodCallParams:
        """Creates a new instance using the hello_world_check(string)void ABI method"""
        params = {
            k: v for k, v in locals().items()
            if k != 'self' and v is not None
        }
        return self.app_factory.params.create(
            applications.AppFactoryCreateMethodCallParams(
                **{
                **params,
                "method": "hello_world_check(string)void",
                "args": _parse_abi_args(args),
                }
            )
        )

class HelloWorldAppFactoryUpdateParams:
    """Parameters for 'update' operations of HelloWorldApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        extra_program_pages: int | None = None,
        schema: transactions.AppCreateSchema | None = None,
        signer: TransactionSigner | None = None,
        rekey_to: str | None = None,
        lease: bytes | None = None,
        static_fee: models.AlgoAmount | None = None,
        extra_fee: models.AlgoAmount | None = None,
        max_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        sender: str | None = None,
        note: bytes | None = None,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        deploy_time_params: models.TealTemplateParams | None = None,
        updatable: bool | None = None,
        deletable: bool | None = None,
        on_complete: (ON_COMPLETE_TYPES | None) = None,
    ) -> transactions.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = {
            k: v for k, v in locals().items()
            if k != 'self' and v is not None
        }
        return self.app_factory.params.bare.deploy_update(
            applications.AppFactoryCreateParams(**params)
        )

class HelloWorldAppFactoryDeleteParams:
    """Parameters for 'delete' operations of HelloWorldApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        extra_program_pages: int | None = None,
        schema: transactions.AppCreateSchema | None = None,
        signer: TransactionSigner | None = None,
        rekey_to: str | None = None,
        lease: bytes | None = None,
        static_fee: models.AlgoAmount | None = None,
        extra_fee: models.AlgoAmount | None = None,
        max_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        sender: str | None = None,
        note: bytes | None = None,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        deploy_time_params: models.TealTemplateParams | None = None,
        updatable: bool | None = None,
        deletable: bool | None = None,
        on_complete: (ON_COMPLETE_TYPES | None) = None,
    ) -> transactions.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = {
            k: v for k, v in locals().items()
            if k != 'self' and v is not None
        }
        return self.app_factory.params.bare.deploy_delete(
            applications.AppFactoryCreateParams(**params)
        )


class HelloWorldAppFactoryCreateTransaction:
    """Create transactions for HelloWorldApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory
        self.create = HelloWorldAppFactoryCreateTransactionCreate(app_factory)


class HelloWorldAppFactoryCreateTransactionCreate:
    """Create new instances of HelloWorldApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (ON_COMPLETE_TYPES | None) = None,
        extra_program_pages: int | None = None,
        schema: transactions.AppCreateSchema | None = None,
        signer: TransactionSigner | None = None,
        rekey_to: str | None = None,
        lease: bytes | None = None,
        static_fee: models.AlgoAmount | None = None,
        extra_fee: models.AlgoAmount | None = None,
        max_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        sender: str | None = None,
        note: bytes | None = None,
        args: list[bytes] | None = None,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        deploy_time_params: models.TealTemplateParams | None = None,
        updatable: bool | None = None,
        deletable: bool | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = {
            k: v for k, v in locals().items()
            if k != 'self' and v is not None
        }
        return self.app_factory.create_transaction.bare.create(
            applications.AppFactoryCreateParams(**params)
        )


class HelloWorldAppFactorySend:
    """Send calls to HelloWorldApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory
        self.create = HelloWorldAppFactorySendCreate(app_factory)


class HelloWorldAppFactorySendCreate:
    """Send create calls to HelloWorldApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (ON_COMPLETE_TYPES | None) = None,
        extra_program_pages: int | None = None,
        schema: transactions.AppCreateSchema | None = None,
        max_rounds_to_wait: int | None = None,
        suppress_log: bool | None = None,
        populate_app_call_resources: bool | None = None,
        cover_app_call_inner_txn_fees: bool | None = None,
        signer: TransactionSigner | None = None,
        rekey_to: str | None = None,
        lease: bytes | None = None,
        static_fee: models.AlgoAmount | None = None,
        extra_fee: models.AlgoAmount | None = None,
        max_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        sender: str | None = None,
        note: bytes | None = None,
        args: list[bytes] | None = None,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        deploy_time_params: models.TealTemplateParams | None = None,
        updatable: bool | None = None,
        deletable: bool | None = None,
    ) -> tuple[HelloWorldAppClient, transactions.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = {
            k: v for k, v in locals().items()
            if k != 'self' and v is not None
        }
        result = self.app_factory.send.bare.create(
            applications.AppFactoryCreateWithSendParams(**params)
        )
        return HelloWorldAppClient(result[0]), result[1]


class _HelloWorldAppUpdateComposer:
    def __init__(self, composer: "HelloWorldAppComposer"):
        self.composer = composer


class _HelloWorldAppDeleteComposer:
    def __init__(self, composer: "HelloWorldAppComposer"):
        self.composer = composer


class HelloWorldAppComposer:
    """Composer for creating transaction groups for HelloWorldApp contract calls"""

    def __init__(self, client: "HelloWorldAppClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[applications_abi.ABIReturn | None], typing.Any] | None] = []

    @property
    def update(self) -> "_HelloWorldAppUpdateComposer":
        return _HelloWorldAppUpdateComposer(self)

    @property
    def delete(self) -> "_HelloWorldAppDeleteComposer":
        return _HelloWorldAppDeleteComposer(self)

    def hello(
        self,
        args: tuple[str] | HelloArgs,    *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        populate_app_call_resources: bool = False,
        cover_app_call_inner_txn_fees: bool = False,
        
    ) -> "HelloWorldAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.hello(
                args=args,
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                populate_app_call_resources=populate_app_call_resources,
                cover_app_call_inner_txn_fees=cover_app_call_inner_txn_fees,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "hello(string)string", v
            )
        )
        return self

    def hello_world_check(
        self,
        args: tuple[str] | HelloWorldCheckArgs,    *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        populate_app_call_resources: bool = False,
        cover_app_call_inner_txn_fees: bool = False,
        
    ) -> "HelloWorldAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.hello_world_check(
                args=args,
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                populate_app_call_resources=populate_app_call_resources,
                cover_app_call_inner_txn_fees=cover_app_call_inner_txn_fees,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "hello_world_check(string)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        populate_app_call_resources: bool = False,
        cover_app_call_inner_txn_fees: bool = False,
    ) -> "HelloWorldAppComposer":
        self._composer.add_app_call(
            self.client.params.clear_state(
                applications.AppClientBareCallWithSendParams(
                    account_references=account_references,
                    app_references=app_references,
                    asset_references=asset_references,
                    box_references=box_references,
                    extra_fee=extra_fee,
                    first_valid_round=first_valid_round,
                    lease=lease,
                    max_fee=max_fee,
                    note=note,
                    rekey_to=rekey_to,
                    sender=sender,
                    signer=signer,
                    static_fee=static_fee,
                    validity_window=validity_window,
                    last_valid_round=last_valid_round,
                    populate_app_call_resources=populate_app_call_resources,
                    cover_app_call_inner_txn_fees=cover_app_call_inner_txn_fees,
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "HelloWorldAppComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> transactions.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> transactions.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        max_rounds_to_wait: int | None = None,
        suppress_log: bool | None = None,
        populate_app_call_resources: bool | None = None,
        cover_app_call_inner_txn_fees: bool | None = None,
    ) -> transactions.SendAtomicTransactionComposerResults:
        return self._composer.send(
            max_rounds_to_wait=max_rounds_to_wait,
            suppress_log=suppress_log,
            populate_app_call_resources=populate_app_call_resources,
            cover_app_call_inner_txn_fees=cover_app_call_inner_txn_fees,
        )
