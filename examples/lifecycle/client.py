# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionWithSigner
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
from algokit_utils import applications, models, protocols, transactions
from algokit_utils.applications import abi as applications_abi

_APP_SPEC_JSON = r"""{
    "arcs": [],
    "bareActions": {
        "call": [
            "UpdateApplication"
        ],
        "create": [
            "NoOp",
            "OptIn"
        ]
    },
    "methods": [
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "name": "hello",
            "returns": {
                "type": "string"
            },
            "events": []
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [],
            "name": "hello",
            "returns": {
                "type": "string"
            },
            "events": []
        },
        {
            "actions": {
                "call": [],
                "create": [
                    "NoOp"
                ]
            },
            "args": [
                {
                    "type": "string",
                    "desc": "The greeting",
                    "name": "greeting"
                }
            ],
            "name": "create",
            "returns": {
                "type": "string",
                "desc": "The formatted greeting"
            },
            "desc": "ABI create method with 1 argument",
            "events": []
        },
        {
            "actions": {
                "call": [],
                "create": [
                    "NoOp"
                ]
            },
            "args": [
                {
                    "type": "string",
                    "name": "greeting"
                },
                {
                    "type": "uint32",
                    "name": "times"
                }
            ],
            "name": "create",
            "returns": {
                "type": "void"
            },
            "desc": "ABI create method with 2 arguments",
            "events": []
        }
    ],
    "name": "LifeCycleApp",
    "state": {
        "keys": {
            "box": {},
            "global": {
                "greeting": {
                    "key": "Z3JlZXRpbmc=",
                    "keyType": "AVMString",
                    "valueType": "AVMBytes"
                },
                "times": {
                    "key": "dGltZXM=",
                    "keyType": "AVMString",
                    "valueType": "AVMUint64"
                }
            },
            "local": {}
        },
        "maps": {
            "box": {},
            "global": {},
            "local": {}
        },
        "schema": {
            "global": {
                "bytes": 1,
                "ints": 1
            },
            "local": {
                "bytes": 0,
                "ints": 0
            }
        }
    },
    "structs": {},
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSAxMApieXRlY2Jsb2NrIDB4IDB4NzQ2OTZkNjU3MyAweDY3NzI2NTY1NzQ2OTZlNjcgMHgxNTFmN2M3NQp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sMTAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgwMmJlY2UxMSAvLyAiaGVsbG8oc3RyaW5nKXN0cmluZyIKPT0KYm56IG1haW5fbDkKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHhhYjA2YzFhOCAvLyAiaGVsbG8oKXN0cmluZyIKPT0KYm56IG1haW5fbDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg5N2YxZmMxMSAvLyAiY3JlYXRlKHN0cmluZylzdHJpbmciCj09CmJueiBtYWluX2w3CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4NjAxOTMyNjQgLy8gImNyZWF0ZShzdHJpbmcsdWludDMyKXZvaWQiCj09CmJueiBtYWluX2w2CmVycgptYWluX2w2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCj09CiYmCmFzc2VydApjYWxsc3ViIGNyZWF0ZWNhc3Rlcl8xMQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQomJgphc3NlcnQKY2FsbHN1YiBjcmVhdGVjYXN0ZXJfMTAKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDg6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgaGVsbG9jYXN0ZXJfOQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sOToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBoZWxsb2Nhc3Rlcl84CmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQpibnogbWFpbl9sMTYKdHhuIE9uQ29tcGxldGlvbgppbnRjXzEgLy8gT3B0SW4KPT0KYm56IG1haW5fbDE1CnR4biBPbkNvbXBsZXRpb24KcHVzaGludCA0IC8vIFVwZGF0ZUFwcGxpY2F0aW9uCj09CmJueiBtYWluX2wxNAplcnIKbWFpbl9sMTQ6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIHVwZGF0ZV8yCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxNToKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKPT0KYXNzZXJ0CmNhbGxzdWIgYmFyZWNyZWF0ZV81CmludGNfMSAvLyAxCnJldHVybgptYWluX2wxNjoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKPT0KYXNzZXJ0CmNhbGxzdWIgYmFyZWNyZWF0ZV81CmludGNfMSAvLyAxCnJldHVybgoKLy8gaW50X3RvX2FzY2lpCmludHRvYXNjaWlfMDoKcHJvdG8gMSAxCnB1c2hieXRlcyAweDMwMzEzMjMzMzQzNTM2MzczODM5IC8vICIwMTIzNDU2Nzg5IgpmcmFtZV9kaWcgLTEKaW50Y18xIC8vIDEKZXh0cmFjdDMKcmV0c3ViCgovLyBpdG9hCml0b2FfMToKcHJvdG8gMSAxCmZyYW1lX2RpZyAtMQppbnRjXzAgLy8gMAo9PQpibnogaXRvYV8xX2w1CmZyYW1lX2RpZyAtMQppbnRjXzIgLy8gMTAKLwppbnRjXzAgLy8gMAo+CmJueiBpdG9hXzFfbDQKYnl0ZWNfMCAvLyAiIgppdG9hXzFfbDM6CmZyYW1lX2RpZyAtMQppbnRjXzIgLy8gMTAKJQpjYWxsc3ViIGludHRvYXNjaWlfMApjb25jYXQKYiBpdG9hXzFfbDYKaXRvYV8xX2w0OgpmcmFtZV9kaWcgLTEKaW50Y18yIC8vIDEwCi8KY2FsbHN1YiBpdG9hXzEKYiBpdG9hXzFfbDMKaXRvYV8xX2w1OgpwdXNoYnl0ZXMgMHgzMCAvLyAiMCIKaXRvYV8xX2w2OgpyZXRzdWIKCi8vIHVwZGF0ZQp1cGRhdGVfMjoKcHJvdG8gMCAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKcHVzaGludCBUTVBMX1VQREFUQUJMRSAvLyBUTVBMX1VQREFUQUJMRQovLyBDaGVjayBhcHAgaXMgdXBkYXRhYmxlCmFzc2VydApyZXRzdWIKCi8vIGhlbGxvCmhlbGxvXzM6CnByb3RvIDEgMQpieXRlY18wIC8vICIiCmJ5dGVjXzAgLy8gIiIKc3RvcmUgMAppbnRjXzAgLy8gMApzdG9yZSAxCmhlbGxvXzNfbDE6CmxvYWQgMQpieXRlY18xIC8vICJ0aW1lcyIKYXBwX2dsb2JhbF9nZXQKPApieiBoZWxsb18zX2wzCmxvYWQgMApieXRlY18yIC8vICJncmVldGluZyIKYXBwX2dsb2JhbF9nZXQKY29uY2F0CnB1c2hieXRlcyAweDJjMjAgLy8gIiwgIgpjb25jYXQKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmNvbmNhdApwdXNoYnl0ZXMgMHgwYSAvLyAiXG4iCmNvbmNhdApzdG9yZSAwCmxvYWQgMQppbnRjXzEgLy8gMQorCnN0b3JlIDEKYiBoZWxsb18zX2wxCmhlbGxvXzNfbDM6CmxvYWQgMApmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKbGVuCml0b2IKZXh0cmFjdCA2IDAKZnJhbWVfZGlnIDAKY29uY2F0CmZyYW1lX2J1cnkgMApyZXRzdWIKCi8vIGhlbGxvCmhlbGxvXzQ6CnByb3RvIDAgMQpieXRlY18wIC8vICIiCmJ5dGVjXzAgLy8gIiIKc3RvcmUgMgppbnRjXzAgLy8gMApzdG9yZSAzCmhlbGxvXzRfbDE6CmxvYWQgMwpieXRlY18xIC8vICJ0aW1lcyIKYXBwX2dsb2JhbF9nZXQKPApieiBoZWxsb180X2wzCmxvYWQgMgpieXRlY18yIC8vICJncmVldGluZyIKYXBwX2dsb2JhbF9nZXQKY29uY2F0CnB1c2hieXRlcyAweDJjMjA2ZDc5NzM3NDY1NzI3OTIwNzA2NTcyNzM2ZjZlMGEgLy8gIiwgbXlzdGVyeSBwZXJzb25cbiIKY29uY2F0CnN0b3JlIDIKbG9hZCAzCmludGNfMSAvLyAxCisKc3RvcmUgMwpiIGhlbGxvXzRfbDEKaGVsbG9fNF9sMzoKbG9hZCAyCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApsZW4KaXRvYgpleHRyYWN0IDYgMApmcmFtZV9kaWcgMApjb25jYXQKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gYmFyZV9jcmVhdGUKYmFyZWNyZWF0ZV81Ogpwcm90byAwIDAKYnl0ZWNfMiAvLyAiZ3JlZXRpbmciCnB1c2hieXRlcyAweDQ4NjU2YzZjNmYgLy8gIkhlbGxvIgphcHBfZ2xvYmFsX3B1dApieXRlY18xIC8vICJ0aW1lcyIKaW50Y18xIC8vIDEKYXBwX2dsb2JhbF9wdXQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBjcmVhdGUKY3JlYXRlXzY6CnByb3RvIDEgMQpieXRlY18wIC8vICIiCmJ5dGVjXzIgLy8gImdyZWV0aW5nIgpmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKYXBwX2dsb2JhbF9wdXQKYnl0ZWNfMSAvLyAidGltZXMiCmludGNfMSAvLyAxCmFwcF9nbG9iYWxfcHV0CmZyYW1lX2RpZyAtMQpleHRyYWN0IDIgMApwdXNoYnl0ZXMgMHg1ZiAvLyAiXyIKY29uY2F0CmJ5dGVjXzEgLy8gInRpbWVzIgphcHBfZ2xvYmFsX2dldApjYWxsc3ViIGl0b2FfMQpjb25jYXQKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmxlbgppdG9iCmV4dHJhY3QgNiAwCmZyYW1lX2RpZyAwCmNvbmNhdApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBjcmVhdGUKY3JlYXRlXzc6CnByb3RvIDIgMApieXRlY18yIC8vICJncmVldGluZyIKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzEgLy8gInRpbWVzIgpmcmFtZV9kaWcgLTEKYXBwX2dsb2JhbF9wdXQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBoZWxsb19jYXN0ZXIKaGVsbG9jYXN0ZXJfODoKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKZHVwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmNhbGxzdWIgaGVsbG9fMwpmcmFtZV9idXJ5IDAKYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBoZWxsb19jYXN0ZXIKaGVsbG9jYXN0ZXJfOToKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKY2FsbHN1YiBoZWxsb180CmZyYW1lX2J1cnkgMApieXRlY18zIC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIGNyZWF0ZV9jYXN0ZXIKY3JlYXRlY2FzdGVyXzEwOgpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKY2FsbHN1YiBjcmVhdGVfNgpmcmFtZV9idXJ5IDAKYnl0ZWNfMyAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBjcmVhdGVfY2FzdGVyCmNyZWF0ZWNhc3Rlcl8xMToKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpmcmFtZV9idXJ5IDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgppbnRjXzAgLy8gMApleHRyYWN0X3VpbnQzMgpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDEKY2FsbHN1YiBjcmVhdGVfNwpyZXRzdWI=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDEKY2FsbHN1YiBjbGVhcl8wCmludGNfMCAvLyAxCnJldHVybgoKLy8gY2xlYXIKY2xlYXJfMDoKcHJvdG8gMCAwCmludGNfMCAvLyAxCnJldHVybg=="
    }
}"""
APP_SPEC = applications.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: typing.Any | None = None) -> list[typing.Any] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: typing.Any) -> typing.Any:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [convert_dataclass(arg) for arg in method_args] if method_args else None


@dataclasses.dataclass(frozen=True)
class HelloStringStringArgs:
    """Dataclass for hello_string_string arguments"""
    name: str

@dataclasses.dataclass(frozen=True)
class CreateStringStringArgs:
    """Dataclass for create_string_string arguments"""
    greeting: str

@dataclasses.dataclass(frozen=True)
class CreateStringUint32VoidArgs:
    """Dataclass for create_string_uint32_void arguments"""
    greeting: str
    times: int


class _LifeCycleAppUpdate:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client

    def bare(self, params: applications.AppClientBareCallWithCompilationAndSendParams | None = None) -> transactions.AppUpdateParams:
        return self.app_client.params.bare.update(params)


class LifeCycleAppParams:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client
    @property
    def update(self) -> "_LifeCycleAppUpdate":
        return _LifeCycleAppUpdate(self.app_client)
    def hello_string_string(
        self,
        args: tuple[str] | HelloStringStringArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        return self.app_client.params.call(applications.AppClientMethodCallWithSendParams(
                method="hello(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def hello_string(
        self,
            *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.AppCallMethodCallParams:
    
        return self.app_client.params.call(applications.AppClientMethodCallWithSendParams(
                method="hello()string",
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def create_string_string(
        self,
        args: tuple[str] | CreateStringStringArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        return self.app_client.params.call(applications.AppClientMethodCallWithSendParams(
                method="create(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def create_string_uint32_void(
        self,
        args: tuple[str, int] | CreateStringUint32VoidArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        return self.app_client.params.call(applications.AppClientMethodCallWithSendParams(
                method="create(string,uint32)void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def clear_state(self, params: applications.AppClientBareCallWithSendParams | None = None) -> transactions.AppCallParams:
        return self.app_client.params.bare.clear_state(params)


class _LifeCycleAppUpdateTransaction:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client

    def bare(self, params: applications.AppClientBareCallWithCompilationAndSendParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.update(params)


class LifeCycleAppCreateTransactionParams:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client
    @property
    def update(self) -> "_LifeCycleAppUpdateTransaction":
        return _LifeCycleAppUpdateTransaction(self.app_client)
    def hello_string_string(
        self,
        args: tuple[str] | HelloStringStringArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.BuiltTransactions:
        method_args = _parse_abi_args(args)
        return self.app_client.create_transaction.call(applications.AppClientMethodCallWithSendParams(
                method="hello(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def hello_string(
        self,
            *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.BuiltTransactions:
    
        return self.app_client.create_transaction.call(applications.AppClientMethodCallWithSendParams(
                method="hello()string",
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def create_string_string(
        self,
        args: tuple[str] | CreateStringStringArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.BuiltTransactions:
        method_args = _parse_abi_args(args)
        return self.app_client.create_transaction.call(applications.AppClientMethodCallWithSendParams(
                method="create(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def create_string_uint32_void(
        self,
        args: tuple[str, int] | CreateStringUint32VoidArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.BuiltTransactions:
        method_args = _parse_abi_args(args)
        return self.app_client.create_transaction.call(applications.AppClientMethodCallWithSendParams(
                method="create(string,uint32)void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def clear_state(self, params: applications.AppClientBareCallWithSendParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(params)


class _LifeCycleAppUpdateSend:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client

    def bare(self, params: applications.AppClientBareCallWithCompilationAndSendParams | None = None) -> transactions.SendAppTransactionResult:
        return self.app_client.send.bare.update(params)


class LifeCycleAppSend:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client
    @property
    def update(self) -> "_LifeCycleAppUpdateSend":
        return _LifeCycleAppUpdateSend(self.app_client)
    def hello_string_string(
        self,
        args: tuple[str] | HelloStringStringArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        response = self.app_client.send.call(applications.AppClientMethodCallWithSendParams(
                method="hello(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))
        return transactions.SendAppTransactionResult[str](**dataclasses.asdict(response))

    def hello_string(
        self,
            *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.SendAppTransactionResult[str]:
    
        response = self.app_client.send.call(applications.AppClientMethodCallWithSendParams(
                method="hello()string",
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))
        return transactions.SendAppTransactionResult[str](**dataclasses.asdict(response))

    def create_string_string(
        self,
        args: tuple[str] | CreateStringStringArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.SendAppTransactionResult[str]:
        method_args = _parse_abi_args(args)
        response = self.app_client.send.call(applications.AppClientMethodCallWithSendParams(
                method="create(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))
        return transactions.SendAppTransactionResult[str](**dataclasses.asdict(response))

    def create_string_uint32_void(
        self,
        args: tuple[str, int] | CreateStringUint32VoidArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> transactions.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        response = self.app_client.send.call(applications.AppClientMethodCallWithSendParams(
                method="create(string,uint32)void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))
        return transactions.SendAppTransactionResult[None](**dataclasses.asdict(response))

    def clear_state(self, params: applications.AppClientBareCallWithSendParams | None = None) -> transactions.SendAppTransactionResult[applications_abi.ABIReturn]:
        return self.app_client.send.bare.clear_state(params)


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    greeting: bytes
    times: int

class LifeCycleAppState:
    """Methods to access state for the current LifeCycleApp app"""

    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client

    @property
    def global_state(self) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: applications.AppClient):
        self.app_client = app_client
        

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        return typing.cast(GlobalStateValue, result)

    def greeting(self) -> bytes:
            """Get the current value of the greeting key in global_state state"""
            return typing.cast(bytes, self.app_client.state.global_state.get_value("greeting"))

    def times(self) -> int:
            """Get the current value of the times key in global_state state"""
            return typing.cast(int, self.app_client.state.global_state.get_value("times"))

class LifeCycleAppClient:
    """Client for interacting with LifeCycleApp smart contract"""

    @typing.overload
    def __init__(self, app_client: applications.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: protocols.AlgorandClientProtocol,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: applications.AppClient | None = None,
        *,
        algorand: protocols.AlgorandClientProtocol | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = applications.AppClient(
                applications.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = LifeCycleAppParams(self.app_client)
        self.create_transaction = LifeCycleAppCreateTransactionParams(self.app_client)
        self.send = LifeCycleAppSend(self.app_client)
        self.state = LifeCycleAppState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: protocols.AlgorandClientProtocol,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: applications.AppLookup | None = None,
    ) -> "LifeCycleAppClient":
        return LifeCycleAppClient(
            applications.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: protocols.AlgorandClientProtocol,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LifeCycleAppClient":
        return LifeCycleAppClient(
            applications.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> applications.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> protocols.AlgorandClientProtocol:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LifeCycleAppClient":
        return LifeCycleAppClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "LifeCycleAppComposer":
        return LifeCycleAppComposer(self)

    def decode_return_value(
        self,
        method: str,
        return_value: applications_abi.ABIReturn | None
    ) -> applications_abi.ABIValue | applications_abi.ABIStruct | None:
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        return return_value.get_arc56_value(arc56_method, self.app_spec.structs)


@dataclasses.dataclass(frozen=True)
class LifeCycleAppMethodCallCreateParams(
    applications.AppClientCreateSchema, applications.BaseAppClientMethodCallParams[
        tuple[str] | CreateStringStringArgs | tuple[str, int] | CreateStringUint32VoidArgs,
        typing.Literal["create(string)string"] | typing.Literal["create(string,uint32)void"],
        typing.Literal[OnComplete.NoOpOC]
    ]
):
    """Parameters for creating LifeCycleApp contract using ABI"""

    def to_algokit_utils_params(self) -> applications.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return applications.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class LifeCycleAppBareCallCreateParams(applications.AppClientCreateSchema, applications.AppClientBareCallParams, applications.BaseOnCompleteParams[typing.Literal[OnComplete.NoOpOC, OnComplete.OptInOC]]):
    """Parameters for creating LifeCycleApp contract using bare calls"""

    def to_algokit_utils_params(self) -> applications.AppClientBareCallCreateParams:
        return applications.AppClientBareCallCreateParams(**self.__dict__)

@dataclasses.dataclass(frozen=True)
class LifeCycleAppBareCallUpdateParams(applications.AppClientBareCallParams):
    """Parameters for calling LifeCycleApp contract using bare calls"""

    def to_algokit_utils_params(self) -> applications.AppClientBareCallParams:
        return applications.AppClientBareCallParams(**self.__dict__)

class LifeCycleAppFactory(applications.TypedAppFactoryProtocol):
    """Factory for deploying and managing LifeCycleAppClient smart contracts"""

    def __init__(
        self,
        algorand: protocols.AlgorandClientProtocol,
        *,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        updatable: bool | None = None,
        deletable: bool | None = None,
        deploy_time_params: models.TealTemplateParams | None = None,
    ):
        self.app_factory = applications.AppFactory(
            params=applications.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                updatable=updatable,
                deletable=deletable,
                deploy_time_params=deploy_time_params,
            )
        )
        self.params = LifeCycleAppFactoryParams(self.app_factory)
        self.create_transaction = LifeCycleAppFactoryCreateTransaction(self.app_factory)
        self.send = LifeCycleAppFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name

    @property
    def app_spec(self) -> applications.Arc56Contract:
        return self.app_factory.app_spec

    @property
    def algorand(self) -> protocols.AlgorandClientProtocol:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        deploy_time_params: models.TealTemplateParams | None = None,
        on_update: applications.OnUpdate = applications.OnUpdate.Fail,
        on_schema_break: applications.OnSchemaBreak = applications.OnSchemaBreak.Fail,
        create_params: LifeCycleAppMethodCallCreateParams | LifeCycleAppBareCallCreateParams | None = None,
        update_params: LifeCycleAppBareCallUpdateParams | None = None,
        existing_deployments: applications.AppLookup | None = None,
        ignore_cache: bool = False,
        updatable: bool | None = None,
        deletable: bool | None = None,
        app_name: str | None = None,
        max_rounds_to_wait: int | None = None,
        suppress_log: bool = False,
        populate_app_call_resources: bool = False,
    ) -> tuple[LifeCycleAppClient, applications.AppFactoryDeployResponse]:
        deploy_response = self.app_factory.deploy(
            deploy_time_params=deploy_time_params,
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            updatable=updatable,
            deletable=deletable,
            app_name=app_name,
            max_rounds_to_wait=max_rounds_to_wait,
            suppress_log=suppress_log,
            populate_app_call_resources=populate_app_call_resources,
        )

        return LifeCycleAppClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: applications.AppLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LifeCycleAppClient:
        """Get an app client by creator address and name"""
        return LifeCycleAppClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LifeCycleAppClient:
        """Get an app client by app ID"""
        return LifeCycleAppClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class LifeCycleAppFactoryParams:
    """Parameters for creating transactions for LifeCycleApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory
        self.create = LifeCycleAppFactoryCreateParams(app_factory)
        self.deploy_update = LifeCycleAppFactoryUpdateParams(app_factory)
        self.deploy_delete = LifeCycleAppFactoryDeleteParams(app_factory)

class LifeCycleAppFactoryCreateParams:
    """Parameters for 'create' operations of LifeCycleApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (typing.Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> transactions.AppCreateParams:
        """Creates an instance using a bare call"""
        return self.app_factory.params.bare.create(
            applications.AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )

    def hello_string_string(
            self,
            args: tuple[str] | HelloStringStringArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.AppCreateMethodCallParams:
            """Creates a new instance using the hello(string)string ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.params.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="hello(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

    def hello_string(
            self,
            args: typing.Any,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.AppCreateMethodCallParams:
            """Creates a new instance using the hello()string ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.params.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="hello()string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

    def create_string_string(
            self,
            args: tuple[str] | CreateStringStringArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.AppCreateMethodCallParams:
            """Creates a new instance using the create(string)string ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.params.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="create(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

    def create_string_uint32_void(
            self,
            args: tuple[str, int] | CreateStringUint32VoidArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.AppCreateMethodCallParams:
            """Creates a new instance using the create(string,uint32)void ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.params.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="create(string,uint32)void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

class LifeCycleAppFactoryUpdateParams:
    """Parameters for 'update' operations of LifeCycleApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (typing.Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> transactions.AppUpdateParams:
        """Updates an instance using a bare call"""
        return self.app_factory.params.bare.deploy_update(
            applications.AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )

class LifeCycleAppFactoryDeleteParams:
    """Parameters for 'delete' operations of LifeCycleApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (typing.Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> transactions.AppDeleteParams:
        """Deletes an instance using a bare call"""
        return self.app_factory.params.bare.deploy_delete(
            applications.AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )


class LifeCycleAppFactoryCreateTransaction:
    """Create transactions for LifeCycleApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory
        self.create = LifeCycleAppFactoryCreateTransactionCreate(app_factory)

    def hello_string_string(
            self,
            args: tuple[str] | HelloStringStringArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.BuiltTransactions:
            """Creates a transaction using the hello(string)string ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.create_transaction.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="hello(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

    def hello_string(
            self,
            args: typing.Any,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.BuiltTransactions:
            """Creates a transaction using the hello()string ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.create_transaction.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="hello()string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

    def create_string_string(
            self,
            args: tuple[str] | CreateStringStringArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.BuiltTransactions:
            """Creates a transaction using the create(string)string ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.create_transaction.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="create(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

    def create_string_uint32_void(
            self,
            args: tuple[str, int] | CreateStringUint32VoidArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> transactions.BuiltTransactions:
            """Creates a transaction using the create(string,uint32)void ABI method"""
            method_args = _parse_abi_args(args)
            return self.app_factory.create_transaction.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="create(string,uint32)void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )


class LifeCycleAppFactoryCreateTransactionCreate:
    """Create new instances of LifeCycleApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (typing.Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        return self.app_factory.create_transaction.bare.create(
            applications.AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )


class LifeCycleAppFactorySend:
    """Send calls to LifeCycleApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory
        self.create = LifeCycleAppFactorySendCreate(app_factory)


class LifeCycleAppFactorySendCreate:
    """Send create calls to LifeCycleApp contract"""

    def __init__(self, app_factory: applications.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (typing.Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> tuple[LifeCycleAppClient, transactions.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        result = self.app_factory.send.bare.create(
            applications.AppFactoryCreateWithSendParams(on_complete=on_complete, **kwargs)
        )
        return LifeCycleAppClient(result[0]), result[1]

    def create_string_string(
            self,
            args: tuple[str] | CreateStringStringArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> tuple[LifeCycleAppClient, applications.AppFactoryCreateMethodCallResult[str]]:
            """Creates and sends a transaction using the create(string)string ABI method"""
            method_args = _parse_abi_args(args)
            result = self.app_factory.send.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="create(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
            return_value = None if result[1].abi_return is None else typing.cast(str, result[1].abi_return)
    
            return LifeCycleAppClient(result[0]), applications.AppFactoryCreateMethodCallResult[str](
                app_id=result[1].app_id,
                abi_return=return_value,
                transaction=result[1].transaction,
                confirmation=result[1].confirmation,
                group_id=result[1].group_id,
                tx_ids=result[1].tx_ids,
                transactions=result[1].transactions,
                confirmations=result[1].confirmations,
                app_address=result[1].app_address,
            )

    def create_string_uint32_void(
            self,
            args: tuple[str, int] | CreateStringUint32VoidArgs,
            *,
            on_complete: (typing.Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> tuple[LifeCycleAppClient, applications.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the create(string,uint32)void ABI method"""
            method_args = _parse_abi_args(args)
            result = self.app_factory.send.create(
                applications.AppFactoryCreateMethodCallParams(
                    method="create(string,uint32)void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
            return_value = None if result[1].abi_return is None else typing.cast(None, result[1].abi_return)
    
            return LifeCycleAppClient(result[0]), applications.AppFactoryCreateMethodCallResult[None](
                app_id=result[1].app_id,
                abi_return=return_value,
                transaction=result[1].transaction,
                confirmation=result[1].confirmation,
                group_id=result[1].group_id,
                tx_ids=result[1].tx_ids,
                transactions=result[1].transactions,
                confirmations=result[1].confirmations,
                app_address=result[1].app_address,
            )


class _LifeCycleAppUpdateComposer:
    def __init__(self, composer: "LifeCycleAppComposer"):
        self.composer = composer


class LifeCycleAppComposer:
    """Composer for creating transaction groups for LifeCycleApp contract calls"""

    def __init__(self, client: "LifeCycleAppClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[applications_abi.ABIReturn | None], typing.Any] | None] = []

    @property
    def update(self) -> "_LifeCycleAppUpdateComposer":
        return _LifeCycleAppUpdateComposer(self)

    def hello_string_string(
        self,
        args: tuple[str] | HelloStringStringArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> "LifeCycleAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.hello_string_string(
                args=args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "hello(string)string", v
            )
        )
        return self

    def hello_string(
        self,
            *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> "LifeCycleAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.hello_string(
                
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "hello()string", v
            )
        )
        return self

    def create_string_string(
        self,
        args: tuple[str] | CreateStringStringArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> "LifeCycleAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_string_string(
                args=args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create(string)string", v
            )
        )
        return self

    def create_string_uint32_void(
        self,
        args: tuple[str, int] | CreateStringUint32VoidArgs,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
        
    ) -> "LifeCycleAppComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_string_uint32_void(
                args=args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create(string,uint32)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        account_references: list[str] | None = None,
        app_references: list[int] | None = None,
        asset_references: list[int] | None = None,
        box_references: list[models.BoxReference | models.BoxIdentifier] | None = None,
        extra_fee: models.AlgoAmount | None = None,
        lease: bytes | None = None,
        max_fee: models.AlgoAmount | None = None,
        note: bytes | None = None,
        rekey_to: str | None = None,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        static_fee: models.AlgoAmount | None = None,
        validity_window: int | None = None,
        first_valid_round: int | None = None,
        last_valid_round: int | None = None,
    ) -> "LifeCycleAppComposer":
        self._composer.add_app_call(
            self.client.params.clear_state(
                applications.AppClientBareCallWithSendParams(
                    account_references=account_references,
                    app_references=app_references,
                    asset_references=asset_references,
                    box_references=box_references,
                    extra_fee=extra_fee,
                    first_valid_round=first_valid_round,
                    lease=lease,
                    max_fee=max_fee,
                    note=note,
                    rekey_to=rekey_to,
                    sender=sender,
                    signer=signer,
                    static_fee=static_fee,
                    validity_window=validity_window,
                    last_valid_round=last_valid_round,
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "LifeCycleAppComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> transactions.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: int | None = None,
    ) -> transactions.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        max_rounds_to_wait: int | None = None,
        suppress_log: bool | None = None,
        populate_app_call_resources: bool | None = None,
    ) -> transactions.SendAtomicTransactionComposerResults:
        return self._composer.send(
            max_rounds_to_wait=max_rounds_to_wait,
            suppress_log=suppress_log,
            populate_app_call_resources=populate_app_call_resources,
        )
