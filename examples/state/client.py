# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

from dataclasses import dataclass, asdict, replace
from typing import (
    Any,
    Callable,
    Optional,
    Protocol,
    Union,
    overload,
    Generic,
    Tuple,
    TypedDict,
    runtime_checkable,
    cast,
    Literal,
)
import algosdk
from algosdk.transaction import OnComplete
from algokit_utils.applications import AppFactoryCreateParams, AppFactoryCreateMethodCallResult, AppFactoryCreateWithSendParams, AppFactoryCreateMethodCallParams
from algokit_utils.applications import (
    AppClient,
    AppClientBareCallWithSendParams,
    AppClientMethodCallWithSendParams,
    AppClientMethodCallParams,
    AppClientParams,
    AppFactory,
    AppFactoryParams,
    Arc56Contract,
    AppClientBareCallWithCompilationAndSendParams,
    AppClientBareCallParams,
    AppClientCreateSchema,
    BaseOnCompleteParams,
    AppClientMethodCallParams,
    AppClientBareCallParams,
    AppClientBareCallCreateParams,
    AppClientMethodCallCreateParams,
    BaseAppClientMethodCallParams,
)
from algokit_utils.transactions import SendAppCreateTransactionResult, AppCallParams, AppCreateParams, AppDeleteParams, AppUpdateParams
from algosdk.atomic_transaction_composer import TransactionWithSigner
from algokit_utils.applications.abi import ABIReturn, ABIStruct, ABIValue
from algokit_utils.applications.app_deployer import AppLookup, OnSchemaBreak, OnUpdate
from algokit_utils.applications.app_factory import (
    AppFactoryDeployResponse,
    TypedAppFactoryProtocol,
)
from algokit_utils.models import AlgoAmount, BoxIdentifier, BoxReference
from algokit_utils.models.state import TealTemplateParams
from algokit_utils.protocols import AlgorandClientProtocol
from algokit_utils.transactions import (
    AppCallMethodCallParams,
    AppCallParams,
    SendAppTransactionResult,
    SendAtomicTransactionComposerResults,
    TransactionComposer,
)
from algokit_utils.transactions.transaction_composer import BuiltTransactions
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig

_APP_SPEC_JSON = r"""{
    "arcs": [],
    "bareActions": {
        "call": [
            "DeleteApplication",
            "UpdateApplication"
        ],
        "create": [
            "NoOp",
            "OptIn"
        ]
    },
    "methods": [
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "name": "call_abi",
            "returns": {
                "type": "string"
            },
            "events": [],
            "readonly": true
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "pay",
                    "name": "txn"
                },
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "name": "call_abi_txn",
            "returns": {
                "type": "string"
            },
            "events": [],
            "readonly": true
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "uint64",
                    "name": "int1"
                },
                {
                    "type": "uint64",
                    "name": "int2"
                },
                {
                    "type": "string",
                    "name": "bytes1"
                },
                {
                    "type": "byte[4]",
                    "name": "bytes2"
                }
            ],
            "name": "set_global",
            "returns": {
                "type": "void"
            },
            "events": []
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "uint64",
                    "name": "int1"
                },
                {
                    "type": "uint64",
                    "name": "int2"
                },
                {
                    "type": "string",
                    "name": "bytes1"
                },
                {
                    "type": "byte[4]",
                    "name": "bytes2"
                }
            ],
            "name": "set_local",
            "returns": {
                "type": "void"
            },
            "events": []
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "byte[4]",
                    "name": "name"
                },
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "name": "set_box",
            "returns": {
                "type": "void"
            },
            "events": []
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "account",
                    "name": "account"
                },
                {
                    "type": "application",
                    "name": "application"
                }
            ],
            "name": "call_with_references",
            "returns": {
                "type": "uint64"
            },
            "events": []
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [],
            "name": "error",
            "returns": {
                "type": "void"
            },
            "events": [],
            "readonly": true
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "defaultValue": {
                        "data": "ZGVmYXVsdCB2YWx1ZQ==",
                        "source": "literal",
                        "type": "AVMString"
                    },
                    "name": "arg_with_default"
                }
            ],
            "name": "default_value",
            "returns": {
                "type": "string"
            },
            "events": [],
            "readonly": true
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "defaultValue": {
                        "data": "default_value",
                        "source": "method"
                    },
                    "name": "arg_with_default"
                }
            ],
            "name": "default_value_from_abi",
            "returns": {
                "type": "string"
            },
            "events": [],
            "readonly": true
        },
        {
            "actions": {
                "call": [],
                "create": [
                    "NoOp"
                ]
            },
            "args": [
                {
                    "type": "string",
                    "name": "input"
                }
            ],
            "name": "create_abi",
            "returns": {
                "type": "string"
            },
            "events": []
        },
        {
            "actions": {
                "call": [
                    "UpdateApplication"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "name": "input"
                }
            ],
            "name": "update_abi",
            "returns": {
                "type": "string"
            },
            "events": []
        },
        {
            "actions": {
                "call": [
                    "DeleteApplication"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "name": "input"
                }
            ],
            "name": "delete_abi",
            "returns": {
                "type": "string"
            },
            "events": []
        },
        {
            "actions": {
                "call": [
                    "OptIn"
                ],
                "create": []
            },
            "args": [],
            "name": "opt_in",
            "returns": {
                "type": "void"
            },
            "events": []
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "(string,uint64)",
                    "name": "name_age",
                    "struct": "Input"
                }
            ],
            "name": "structs",
            "returns": {
                "type": "(string,uint64)",
                "struct": "Output"
            },
            "events": []
        }
    ],
    "name": "StateApp",
    "state": {
        "keys": {
            "box": {},
            "global": {
                "bytes1": {
                    "key": "Ynl0ZXMx",
                    "keyType": "AVMString",
                    "valueType": "AVMBytes"
                },
                "bytes2": {
                    "key": "Ynl0ZXMy",
                    "keyType": "AVMString",
                    "valueType": "AVMBytes"
                },
                "int1": {
                    "key": "aW50MQ==",
                    "keyType": "AVMString",
                    "valueType": "AVMUint64"
                },
                "int2": {
                    "key": "aW50Mg==",
                    "keyType": "AVMString",
                    "valueType": "AVMUint64"
                },
                "value": {
                    "key": "dmFsdWU=",
                    "keyType": "AVMString",
                    "valueType": "AVMUint64"
                }
            },
            "local": {
                "local_bytes1": {
                    "key": "bG9jYWxfYnl0ZXMx",
                    "keyType": "AVMString",
                    "valueType": "AVMBytes"
                },
                "local_bytes2": {
                    "key": "bG9jYWxfYnl0ZXMy",
                    "keyType": "AVMString",
                    "valueType": "AVMBytes"
                },
                "local_int1": {
                    "key": "bG9jYWxfaW50MQ==",
                    "keyType": "AVMString",
                    "valueType": "AVMUint64"
                },
                "local_int2": {
                    "key": "bG9jYWxfaW50Mg==",
                    "keyType": "AVMString",
                    "valueType": "AVMUint64"
                }
            }
        },
        "maps": {
            "box": {},
            "global": {},
            "local": {}
        },
        "schema": {
            "global": {
                "bytes": 2,
                "ints": 3
            },
            "local": {
                "bytes": 2,
                "ints": 2
            }
        }
    },
    "structs": {
        "Input": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "age",
                "type": "uint64"
            }
        ],
        "Output": [
            {
                "name": "message",
                "type": "string"
            },
            {
                "name": "result",
                "type": "uint64"
            }
        ]
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    }
}"""
APP_SPEC = Arc56Contract.from_json(_APP_SPEC_JSON)


@dataclass
class Input:
    """Struct for Input"""
    name: str
    age: int

@dataclass
class Output:
    """Struct for Output"""
    message: str
    result: int


class CallAbiArgs(TypedDict):
    """TypedDict for call_abi arguments"""
    value: str

class CallAbiTxnArgs(TypedDict):
    """TypedDict for call_abi_txn arguments"""
    txn: TransactionWithSigner
    value: str

class SetGlobalArgs(TypedDict):
    """TypedDict for set_global arguments"""
    int1: int
    int2: int
    bytes1: str
    bytes2: bytes | bytearray | tuple[int, int, int, int]

class SetLocalArgs(TypedDict):
    """TypedDict for set_local arguments"""
    int1: int
    int2: int
    bytes1: str
    bytes2: bytes | bytearray | tuple[int, int, int, int]

class SetBoxArgs(TypedDict):
    """TypedDict for set_box arguments"""
    name: bytes | bytearray | tuple[int, int, int, int]
    value: str

class CallWithReferencesArgs(TypedDict):
    """TypedDict for call_with_references arguments"""
    asset: int
    account: str | bytes
    application: int

class DefaultValueArgs(TypedDict):
    """TypedDict for default_value arguments"""
    arg_with_default: str

class DefaultValueFromAbiArgs(TypedDict):
    """TypedDict for default_value_from_abi arguments"""
    arg_with_default: str

class StructsArgs(TypedDict):
    """TypedDict for structs arguments"""
    name_age: Input

class CreateAbiArgs(TypedDict):
    """TypedDict for create_abi arguments"""
    input: str

class UpdateAbiArgs(TypedDict):
    """TypedDict for update_abi arguments"""
    input: str

class DeleteAbiArgs(TypedDict):
    """TypedDict for delete_abi arguments"""
    input: str


class StateAppParams:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client

    def call_abi(
        self,
        args: Tuple[str] | CallAbiArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="call_abi(string)string",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def call_abi_txn(
        self,
        args: Tuple[TransactionWithSigner, str] | CallAbiTxnArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="call_abi_txn(pay,string)string",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def set_global(
        self,
        args: Tuple[int, int, str, bytes | bytearray | tuple[int, int, int, int]] | SetGlobalArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="set_global(uint64,uint64,string,byte[4])void",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def set_local(
        self,
        args: Tuple[int, int, str, bytes | bytearray | tuple[int, int, int, int]] | SetLocalArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="set_local(uint64,uint64,string,byte[4])void",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def set_box(
        self,
        args: Tuple[bytes | bytearray | tuple[int, int, int, int], str] | SetBoxArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="set_box(byte[4],string)void",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def call_with_references(
        self,
        args: Tuple[int, str | bytes, int] | CallWithReferencesArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="call_with_references(asset,account,application)uint64",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def error(
        self,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="error()void",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def default_value(
        self,
        args: Tuple[str] | DefaultValueArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="default_value(string)string",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def default_value_from_abi(
        self,
        args: Tuple[str] | DefaultValueFromAbiArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="default_value_from_abi(string)string",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def structs(
        self,
        args: Tuple[Input] | StructsArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="structs((string,uint64))(string,uint64)",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def update_abi(
        self,
        args: Tuple[str] | UpdateAbiArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="update_abi(string)string",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def delete_abi(
        self,
        args: Tuple[str] | DeleteAbiArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="delete_abi(string)string",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def opt_in(
        self,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> AppCallMethodCallParams:
        method_args = None
        
    
        return self.app_client.params.call(AppClientMethodCallParams(
            method="opt_in()void",
            args=method_args, # type: ignore
            account_references=account_references,
            app_references=app_references,
            asset_references=asset_references,
            box_references=box_references,
            extra_fee=extra_fee,
            first_valid_round=first_valid_round,
            lease=lease,
            max_fee=max_fee,
            note=note,
            rekey_to=rekey_to,
            sender=sender,
            signer=signer,
            static_fee=static_fee,
            validity_window=validity_window,
            last_valid_round=last_valid_round,
        ))

    def clear_state(self, params: AppClientBareCallWithSendParams) -> AppCallParams:
        return self.app_client.params.bare.clear_state(params)


class StateAppCreateTransactionParams:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client

    def call_abi(
        self,
        args: Tuple[str] | CallAbiArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="call_abi(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def call_abi_txn(
        self,
        args: Tuple[TransactionWithSigner, str] | CallAbiTxnArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="call_abi_txn(pay,string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def set_global(
        self,
        args: Tuple[int, int, str, bytes | bytearray | tuple[int, int, int, int]] | SetGlobalArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="set_global(uint64,uint64,string,byte[4])void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def set_local(
        self,
        args: Tuple[int, int, str, bytes | bytearray | tuple[int, int, int, int]] | SetLocalArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="set_local(uint64,uint64,string,byte[4])void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def set_box(
        self,
        args: Tuple[bytes | bytearray | tuple[int, int, int, int], str] | SetBoxArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="set_box(byte[4],string)void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def call_with_references(
        self,
        args: Tuple[int, str | bytes, int] | CallWithReferencesArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="call_with_references(asset,account,application)uint64",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def error(
        self,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="error()void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def default_value(
        self,
        args: Tuple[str] | DefaultValueArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="default_value(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def default_value_from_abi(
        self,
        args: Tuple[str] | DefaultValueFromAbiArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="default_value_from_abi(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def structs(
        self,
        args: Tuple[Input] | StructsArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="structs((string,uint64))(string,uint64)",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def update_abi(
        self,
        args: Tuple[str] | UpdateAbiArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="update_abi(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def delete_abi(
        self,
        args: Tuple[str] | DeleteAbiArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="delete_abi(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def opt_in(
        self,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> BuiltTransactions:
        method_args = None
        
    
        return self.app_client.create_transaction.call(
            AppClientMethodCallWithSendParams(
                method="opt_in()void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )

    def clear_state(self, params: AppClientBareCallWithSendParams) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(params)


class StateAppSend:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client

    def call_abi(
        self,
        args: Tuple[str] | CallAbiArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[str]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="call_abi(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[str](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def call_abi_txn(
        self,
        args: Tuple[TransactionWithSigner, str] | CallAbiTxnArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[str]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="call_abi_txn(pay,string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[str](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def set_global(
        self,
        args: Tuple[int, int, str, bytes | bytearray | tuple[int, int, int, int]] | SetGlobalArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[None]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="set_global(uint64,uint64,string,byte[4])void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[None](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def set_local(
        self,
        args: Tuple[int, int, str, bytes | bytearray | tuple[int, int, int, int]] | SetLocalArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[None]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="set_local(uint64,uint64,string,byte[4])void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[None](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def set_box(
        self,
        args: Tuple[bytes | bytearray | tuple[int, int, int, int], str] | SetBoxArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[None]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="set_box(byte[4],string)void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[None](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def call_with_references(
        self,
        args: Tuple[int, str | bytes, int] | CallWithReferencesArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[int]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="call_with_references(asset,account,application)uint64",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[int](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def error(
        self,
        args: Any,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[None]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="error()void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[None](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def default_value(
        self,
        args: Tuple[str] | DefaultValueArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[str]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="default_value(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[str](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def default_value_from_abi(
        self,
        args: Tuple[str] | DefaultValueFromAbiArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[str]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="default_value_from_abi(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[str](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def structs(
        self,
        args: Tuple[Input] | StructsArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[Output]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="structs((string,uint64))(string,uint64)",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[Output](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def update_abi(
        self,
        args: Tuple[str] | UpdateAbiArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[str]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="update_abi(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[str](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def delete_abi(
        self,
        args: Tuple[str] | DeleteAbiArgs,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[str]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="delete_abi(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[str](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def opt_in(
        self,
        args: Any,
    *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> SendAppTransactionResult[None]:
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        else:
            method_args = args
        
    
        response = self.app_client.send.call(
            AppClientMethodCallWithSendParams(
                method="opt_in()void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
    
        return SendAppTransactionResult[None](**asdict(replace(response, abi_return=response.abi_return.value))) # type: ignore[arg-type]

    def delete_bare(
        self,
        *,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        **kwargs
    ) -> SendAppTransactionResult:
        """Delete the application using a bare call"""
        return self.app_client.send.bare.delete(
            AppClientBareCallWithSendParams(
                sender=sender,
                signer=signer,
                **kwargs
            )
        )

    def update_bare(
        self,
        *,
        sender: str | None = None,
        signer: TransactionSigner | None = None,
        **kwargs
    ) -> SendAppTransactionResult:
        """Update the application using a bare call"""
        return self.app_client.send.bare.update(
            AppClientBareCallWithCompilationAndSendParams(
                sender=sender,
                signer=signer,
                **kwargs
            )
        )

    def clear_state_bare(self, params: AppClientBareCallWithSendParams) -> SendAppTransactionResult:
        return self.app_client.send.bare.clear_state(params)


class StateAppState:
    """Methods to access state for the current StateApp app"""

    def __init__(self, app_client: AppClient):
        self.app_client = app_client

    @property
    def global_state(self) -> "_GlobalState":
        """Methods to access global state for the current app"""
        return _GlobalState(self.app_client)
    def local_state(self, address: str) -> "_LocalState":
        """Methods to access local state for the current app"""
        return _LocalState(self.app_client, address)

class _GlobalState:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client
        

    def get_all(self) -> dict[str, Any]:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        return result

    def bytes1(self) -> bytes:
        """Get the current value of the bytes1 key in global_state state"""
        return cast(bytes, self.app_client.state.global_state.get_value("bytes1"))

    def bytes2(self) -> bytes:
        """Get the current value of the bytes2 key in global_state state"""
        return cast(bytes, self.app_client.state.global_state.get_value("bytes2"))

    def int1(self) -> int:
        """Get the current value of the int1 key in global_state state"""
        return cast(int, self.app_client.state.global_state.get_value("int1"))

    def int2(self) -> int:
        """Get the current value of the int2 key in global_state state"""
        return cast(int, self.app_client.state.global_state.get_value("int2"))

    def value(self) -> int:
        """Get the current value of the value key in global_state state"""
        return cast(int, self.app_client.state.global_state.get_value("value"))

class _LocalState:
    def __init__(self, app_client: AppClient, address: str):
        self.app_client = app_client
        self.address = address

    def get_all(self) -> dict[str, Any]:
        """Get all current keyed values from local_state state"""
        result = self.app_client.state.local_state(self.address).get_all()
        return result

    def local_bytes1(self) -> bytes:
        """Get the current value of the local_bytes1 key in local_state state"""
        return cast(bytes, self.app_client.state.local_state(self.address).get_value("local_bytes1"))

    def local_bytes2(self) -> bytes:
        """Get the current value of the local_bytes2 key in local_state state"""
        return cast(bytes, self.app_client.state.local_state(self.address).get_value("local_bytes2"))

    def local_int1(self) -> int:
        """Get the current value of the local_int1 key in local_state state"""
        return cast(int, self.app_client.state.local_state(self.address).get_value("local_int1"))

    def local_int2(self) -> int:
        """Get the current value of the local_int2 key in local_state state"""
        return cast(int, self.app_client.state.local_state(self.address).get_value("local_int2"))


class StateAppClient:
    """Client for interacting with StateApp smart contract"""

    @overload
    def __init__(self, app_client: AppClient) -> None: ...
    
    @overload
    def __init__(
        self,
        *,
        algorand: AlgorandClientProtocol,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: AppClient | None = None,
        *,
        algorand: AlgorandClientProtocol | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = AppClient(
                AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = StateAppParams(self.app_client)
        self.create_transaction = StateAppCreateTransactionParams(self.app_client)
        self.send = StateAppSend(self.app_client)
        self.state = StateAppState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: AlgorandClientProtocol,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: AppLookup | None = None,
    ) -> "StateAppClient":
        return StateAppClient(
            AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: AlgorandClientProtocol,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "StateAppClient":
        return StateAppClient(
            AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> AlgorandClientProtocol:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "StateAppClient":
        return StateAppClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "StateAppComposer":
        return StateAppComposer(self)

    def decode_return_value(
        self,
        method: str,
        return_value: ABIReturn | None
    ) -> ABIValue | ABIStruct | None:
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        return return_value.get_arc56_value(arc56_method, self.app_spec.structs)


@dataclass(frozen=True)
class StateAppMethodCallCreateParams(
    AppClientCreateSchema, BaseAppClientMethodCallParams[
        Tuple[str] | CreateAbiArgs,
        Literal["create_abi(string)string"],
        Literal[algosdk.transaction.OnComplete.NoOpOC]
    ]
):
    """Parameters for creating StateApp contract"""
    def to_algokit_utils_params(self) -> AppClientMethodCallCreateParams:
        method_args = list(self.args.values()) if isinstance(self.args, dict) else self.args
        return AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "args": method_args,
                "method": APP_SPEC.get_arc56_method(self.method).to_abi_method(),
                }
            )

@dataclass(frozen=True)
class StateAppBareCallCreateParams(AppClientCreateSchema, AppClientBareCallParams, BaseOnCompleteParams[Literal[OnComplete.NoOpOC, OnComplete.OptInOC]]):
    """Parameters for creating StateApp contract using bare calls"""
    def to_algokit_utils_params(self) -> AppClientBareCallCreateParams:
        return AppClientBareCallCreateParams(**self.__dict__)

@dataclass(frozen=True)
class StateAppMethodCallUpdateParams(
    BaseAppClientMethodCallParams[
        Tuple[str] | UpdateAbiArgs,
        Literal["update_abi(string)string"],
        Literal[algosdk.transaction.OnComplete.UpdateApplicationOC]
    ]
):
    """Parameters for calling StateApp contract"""
    def to_algokit_utils_params(self) -> AppClientMethodCallParams:
        method_args = list(self.args.values()) if isinstance(self.args, dict) else self.args
        return AppClientMethodCallParams(
            **{
                **self.__dict__,
                "args": method_args,
                "method": APP_SPEC.get_arc56_method(self.method).to_abi_method(),
                }
            )

@dataclass(frozen=True)
class StateAppBareCallUpdateParams(AppClientBareCallParams):
    """Parameters for calling StateApp contract using bare calls"""
    def to_algokit_utils_params(self) -> AppClientBareCallParams:
        return AppClientBareCallParams(**self.__dict__)

@dataclass(frozen=True)
class StateAppMethodCallDeleteParams(
    BaseAppClientMethodCallParams[
        Tuple[str] | DeleteAbiArgs,
        Literal["delete_abi(string)string"],
        Literal[algosdk.transaction.OnComplete.DeleteApplicationOC]
    ]
):
    """Parameters for calling StateApp contract"""
    def to_algokit_utils_params(self) -> AppClientMethodCallParams:
        method_args = list(self.args.values()) if isinstance(self.args, dict) else self.args
        return AppClientMethodCallParams(
            **{
                **self.__dict__,
                "args": method_args,
                "method": APP_SPEC.get_arc56_method(self.method).to_abi_method(),
                }
            )

@dataclass(frozen=True)
class StateAppBareCallDeleteParams(AppClientBareCallParams):
    """Parameters for calling StateApp contract using bare calls"""
    def to_algokit_utils_params(self) -> AppClientBareCallParams:
        return AppClientBareCallParams(**self.__dict__)
class StateAppFactory(TypedAppFactoryProtocol):
    """Factory for deploying and managing StateAppClient smart contracts"""

    def __init__(
        self,
        algorand: AlgorandClientProtocol,
        *,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        updatable: bool | None = None,
        deletable: bool | None = None,
        deploy_time_params: TealTemplateParams | None = None,
    ):
        self.app_factory = AppFactory(
            params=AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                updatable=updatable,
                deletable=deletable,
                deploy_time_params=deploy_time_params,
            )
        )
        self.params = StateAppFactoryParams(self.app_factory)
        self.create_transaction = StateAppFactoryCreateTransaction(self.app_factory)
        self.send = StateAppFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name

    @property
    def app_spec(self) -> Arc56Contract:
        return self.app_factory.app_spec

    @property
    def algorand(self) -> AlgorandClientProtocol:
        return self.app_factory.algorand

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: AppLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> StateAppClient:
        return StateAppClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> StateAppClient:
        return StateAppClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )

    def deploy(
        self,
        *,
        deploy_time_params: TealTemplateParams | None = None,
        on_update: OnUpdate = OnUpdate.Fail,
        on_schema_break: OnSchemaBreak = OnSchemaBreak.Fail,
        create_params: StateAppMethodCallCreateParams | StateAppBareCallCreateParams | None = None,
        update_params: StateAppMethodCallUpdateParams | StateAppBareCallUpdateParams | None = None,
        delete_params: StateAppMethodCallDeleteParams | StateAppBareCallDeleteParams | None = None,
        existing_deployments: AppLookup | None = None,
        ignore_cache: bool = False,
        updatable: bool | None = None,
        deletable: bool | None = None,
        app_name: str | None = None,
        max_rounds_to_wait: int | None = None,
        suppress_log: bool = False,
        populate_app_call_resources: bool = False,
    ) -> tuple[StateAppClient, AppFactoryDeployResponse]:
        deploy_response = self.app_factory.deploy(
            deploy_time_params=deploy_time_params,
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            updatable=updatable,
            deletable=deletable,
            app_name=app_name,
            max_rounds_to_wait=max_rounds_to_wait,
            suppress_log=suppress_log,
            populate_app_call_resources=populate_app_call_resources,
        )

        return StateAppClient(deploy_response[0]), deploy_response[1]


class StateAppFactoryParams:
    """Parameters for creating transactions for StateApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory
        self.create = StateAppFactoryCreateParams(app_factory)
        self.deploy_update = StateAppFactoryDeployUpdateParams(app_factory)
        self.deploy_delete = StateAppFactoryDeployDeleteParams(app_factory)

class StateAppFactoryCreateParams:
    """Parameters for creating new instances of StateApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (
            Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
        ]
        | None) = None,
        **kwargs
    ) -> AppCreateParams:
        """Creates a new instance of the StateApp contract using a bare call

        Args:
            on_complete: On-completion action for the call
            **kwargs: Additional parameters for the call

        Returns:
            The parameters for a create call
        """
        return self.app_factory.params.bare.create(AppFactoryCreateParams(on_complete=on_complete, **kwargs))


    def call_abi(
            self,
            args: Tuple[str] | CallAbiArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the call_abi(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="call_abi(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def call_abi_txn(
            self,
            args: Tuple[TransactionWithSigner, str] | CallAbiTxnArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the call_abi_txn(pay,string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="call_abi_txn(pay,string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def set_global(
            self,
            args: Tuple[int, int, str, bytes | bytearray | tuple[int, int, int, int]] | SetGlobalArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the set_global(uint64,uint64,string,byte[4])void ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="set_global(uint64,uint64,string,byte[4])void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def set_local(
            self,
            args: Tuple[int, int, str, bytes | bytearray | tuple[int, int, int, int]] | SetLocalArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the set_local(uint64,uint64,string,byte[4])void ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="set_local(uint64,uint64,string,byte[4])void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def set_box(
            self,
            args: Tuple[bytes | bytearray | tuple[int, int, int, int], str] | SetBoxArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the set_box(byte[4],string)void ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="set_box(byte[4],string)void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def call_with_references(
            self,
            args: Tuple[int, str | bytes, int] | CallWithReferencesArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the call_with_references(asset,account,application)uint64 ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="call_with_references(asset,account,application)uint64",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def error(
            self,
            args: Any,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the error()void ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="error()void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def default_value(
            self,
            args: Tuple[str] | DefaultValueArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the default_value(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="default_value(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def default_value_from_abi(
            self,
            args: Tuple[str] | DefaultValueFromAbiArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the default_value_from_abi(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="default_value_from_abi(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def structs(
            self,
            args: Tuple[Input] | StructsArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the structs((string,uint64))(string,uint64) ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="structs((string,uint64))(string,uint64)",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def create_abi(
            self,
            args: Tuple[str] | CreateAbiArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the create_abi(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="create_abi(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def update_abi(
            self,
            args: Tuple[str] | UpdateAbiArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the update_abi(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="update_abi(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def delete_abi(
            self,
            args: Tuple[str] | DeleteAbiArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the delete_abi(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="delete_abi(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def opt_in(
            self,
            args: Any,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> AppCreateParams:
            """Creates a new instance using the opt_in()void ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The parameters for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="opt_in()void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
class StateAppFactoryDeployUpdateParams:
    """Parameters for deploying updates to StateApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory

    def bare(self, **kwargs) -> AppUpdateParams:
        """Updates an existing instance using a bare call

        Args:
            **kwargs: Parameters for the call

        Returns:
            The parameters for an update call
        """
        return self.app_factory.params.bare.deploy_update(AppClientBareCallParams(**kwargs))

class StateAppFactoryDeployDeleteParams:
    """Parameters for deleting instances of StateApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory

    def bare(self, **kwargs) -> AppDeleteParams:
        """Deletes an existing instance using a bare call

        Args:
            **kwargs: Parameters for the call

        Returns:
            The parameters for a delete call
        """
        return self.app_factory.params.bare.deploy_delete(AppClientBareCallParams(**kwargs))


class StateAppFactoryCreateTransaction:
    """Create transactions for StateApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory
        self.create = StateAppFactoryCreateTransactionCreate(app_factory)

class StateAppFactoryCreateTransactionCreate:
    """Create new instances of StateApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (
            Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ]
            | None
        ) = None,
        **kwargs
    ) -> Transaction:
        """Creates a new instance using a bare call

        Args:
            on_complete: On-completion action for the call
            **kwargs: Additional parameters for the call

        Returns:
            The transaction for a create call
        """
        return self.app_factory.create_transaction.bare.create(
            AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )


    def call_abi(
            self,
            args: Tuple[str] | CallAbiArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the call_abi(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="call_abi(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def call_abi_txn(
            self,
            args: Tuple[TransactionWithSigner, str] | CallAbiTxnArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the call_abi_txn(pay,string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="call_abi_txn(pay,string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def set_global(
            self,
            args: Tuple[int, int, str, bytes | bytearray | tuple[int, int, int, int]] | SetGlobalArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the set_global(uint64,uint64,string,byte[4])void ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="set_global(uint64,uint64,string,byte[4])void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def set_local(
            self,
            args: Tuple[int, int, str, bytes | bytearray | tuple[int, int, int, int]] | SetLocalArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the set_local(uint64,uint64,string,byte[4])void ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="set_local(uint64,uint64,string,byte[4])void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def set_box(
            self,
            args: Tuple[bytes | bytearray | tuple[int, int, int, int], str] | SetBoxArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the set_box(byte[4],string)void ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="set_box(byte[4],string)void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def call_with_references(
            self,
            args: Tuple[int, str | bytes, int] | CallWithReferencesArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the call_with_references(asset,account,application)uint64 ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="call_with_references(asset,account,application)uint64",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def error(
            self,
            args: Any,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the error()void ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="error()void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def default_value(
            self,
            args: Tuple[str] | DefaultValueArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the default_value(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="default_value(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def default_value_from_abi(
            self,
            args: Tuple[str] | DefaultValueFromAbiArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the default_value_from_abi(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="default_value_from_abi(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def structs(
            self,
            args: Tuple[Input] | StructsArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the structs((string,uint64))(string,uint64) ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="structs((string,uint64))(string,uint64)",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def create_abi(
            self,
            args: Tuple[str] | CreateAbiArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the create_abi(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="create_abi(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def update_abi(
            self,
            args: Tuple[str] | UpdateAbiArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the update_abi(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="update_abi(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def delete_abi(
            self,
            args: Tuple[str] | DeleteAbiArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the delete_abi(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="delete_abi(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
    def opt_in(
            self,
            args: Any,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a new instance using the opt_in()void ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                The transaction for a create call using this ABI method
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="opt_in()void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )


class StateAppFactorySend:
    """Send calls to StateApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory
        self.create = StateAppFactorySendCreate(app_factory)

class StateAppFactorySendCreate:
    """Send create calls to StateApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (
            Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ]
            | None
        ) = None,
        **kwargs
    ) -> tuple[StateAppClient, SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call

        Args:
            on_complete: On-completion action for the call
            **kwargs: Additional parameters for the call

        Returns:
            A tuple of (client, deploy response)
        """
        result = self.app_factory.send.bare.create(
            AppFactoryCreateWithSendParams(on_complete=on_complete, **kwargs)
        )
        return StateAppClient(result[0]), result[1]


    def create(
            self,
            args: Tuple[str] | CreateAbiArgs,
            *,
            on_complete: (
                Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ]
                | None
            ) = None,
            **kwargs
        ) -> tuple[StateAppClient, AppFactoryCreateMethodCallResult]:
            """Creates a new instance using the create_abi(string)string ABI method
    
            Args:
                args: The arguments for the method call
                on_complete: On-completion action for the call
                **kwargs: Additional parameters for the call
    
            Returns:
                A tuple of (client, deploy response) with the return value from the ABI call
            """
            if isinstance(args, tuple):
                method_args = list(args)
            else:
                method_args = list(args.values())
    
            result = self.app_factory.send.create(
                AppFactoryCreateMethodCallParams(
                    method="create_abi(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )
            return_value = None if result[1].abi_return is None else cast(str, result[1].abi_return)
    
            return StateAppClient(result[0]), AppFactoryCreateMethodCallResult[str](
                app_id=result[1].app_id,
                abi_return=return_value,
                transaction=result[1].transaction,
                confirmation=result[1].confirmation,
                group_id=result[1].group_id,
                tx_ids=result[1].tx_ids,
                transactions=result[1].transactions,
                confirmations=result[1].confirmations,
                app_address=result[1].app_address,
            )


class StateAppComposer:
    """Composer for creating transaction groups for StateApp contract calls"""

    def __init__(self, client: "StateAppClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[Optional[Callable[[Optional[ABIReturn]], Any]]] = []
    def call_abi(
        self,
        args: Tuple[str] | CallAbiArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.call_abi(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "call_abi(string)string", v
            )
        )
        return self

    def call_abi_txn(
        self,
        args: Tuple[TransactionWithSigner, str] | CallAbiTxnArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.call_abi_txn(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "call_abi_txn(pay,string)string", v
            )
        )
        return self

    def set_global(
        self,
        args: Tuple[int, int, str, bytes | bytearray | tuple[int, int, int, int]] | SetGlobalArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.set_global(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_global(uint64,uint64,string,byte[4])void", v
            )
        )
        return self

    def set_local(
        self,
        args: Tuple[int, int, str, bytes | bytearray | tuple[int, int, int, int]] | SetLocalArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.set_local(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_local(uint64,uint64,string,byte[4])void", v
            )
        )
        return self

    def set_box(
        self,
        args: Tuple[bytes | bytearray | tuple[int, int, int, int], str] | SetBoxArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.set_box(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_box(byte[4],string)void", v
            )
        )
        return self

    def call_with_references(
        self,
        args: Tuple[int, str | bytes, int] | CallWithReferencesArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.call_with_references(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "call_with_references(asset,account,application)uint64", v
            )
        )
        return self

    def error(
        self,
        args: Any,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.error(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "error()void", v
            )
        )
        return self

    def default_value(
        self,
        args: Tuple[str] | DefaultValueArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.default_value(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "default_value(string)string", v
            )
        )
        return self

    def default_value_from_abi(
        self,
        args: Tuple[str] | DefaultValueFromAbiArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.default_value_from_abi(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "default_value_from_abi(string)string", v
            )
        )
        return self

    def structs(
        self,
        args: Tuple[Input] | StructsArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.structs(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "structs((string,uint64))(string,uint64)", v
            )
        )
        return self

    def update_abi(
        self,
        args: Tuple[str] | UpdateAbiArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.update_abi(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_abi(string)string", v
            )
        )
        return self

    def delete_abi(
        self,
        args: Tuple[str] | DeleteAbiArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.delete_abi(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "delete_abi(string)string", v
            )
        )
        return self

    def opt_in(
        self,
        args: Any,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        if isinstance(args, tuple):
            method_args = args
        else:
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.opt_in(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "opt_in()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        first_valid_round: Optional[int] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "StateAppComposer":
        self._composer.add_app_call(
            self.client.params.clear_state(
                AppClientBareCallWithSendParams(
                    account_references=account_references,
                    app_references=app_references,
                    asset_references=asset_references,
                    box_references=box_references,
                    extra_fee=extra_fee,
                    first_valid_round=first_valid_round,
                    lease=lease,
                    max_fee=max_fee,
                    note=note,
                    rekey_to=rekey_to,
                    sender=sender,
                    signer=signer,
                    static_fee=static_fee,
                    validity_window=validity_window,
                    last_valid_round=last_valid_round,
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: Optional[TransactionSigner] = None
    ) -> "StateAppComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: int | None = None,
    ) -> SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        max_rounds_to_wait: int | None = None,
        suppress_log: bool | None = None,
        populate_app_call_resources: bool | None = None,
    ) -> SendAtomicTransactionComposerResults:
        return self._composer.send(
            max_rounds_to_wait=max_rounds_to_wait,
            suppress_log=suppress_log,
            populate_app_call_resources=populate_app_call_resources,
        )
