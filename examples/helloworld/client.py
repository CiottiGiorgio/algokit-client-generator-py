# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

from dataclasses import dataclass, asdict, replace, astuple, is_dataclass
from typing import (
    Any,
    Callable,
    Optional,
    Protocol,
    Union,
    overload,
    Generic,
    Tuple,
    TypedDict,
    runtime_checkable,
    cast,
    Literal,
)
import algosdk
from algosdk.transaction import OnComplete
from algokit_utils.applications import AppFactoryCreateParams, AppFactoryCreateMethodCallResult, AppFactoryCreateWithSendParams, AppFactoryCreateMethodCallParams
from algokit_utils.applications import (
    AppClient,
    AppClientBareCallWithSendParams,
    AppClientMethodCallWithSendParams,
    AppClientMethodCallWithCompilationAndSendParams,
    AppClientMethodCallParams,
    AppClientParams,
    AppFactory,
    AppFactoryParams,
    Arc56Contract,
    AppClientBareCallWithCompilationAndSendParams,
    AppClientBareCallParams,
    AppClientCreateSchema,
    BaseOnCompleteParams,
    AppClientMethodCallParams,
    AppClientBareCallParams,
    AppClientBareCallCreateParams,
    AppClientMethodCallCreateParams,
    BaseAppClientMethodCallParams,
)
from algokit_utils.transactions import SendAppCreateTransactionResult, AppCallParams, AppCreateParams, AppDeleteParams, AppUpdateParams, AppCreateMethodCallParams
from algosdk.atomic_transaction_composer import TransactionWithSigner
from algokit_utils.applications.abi import ABIReturn, ABIStruct, ABIValue
from algokit_utils.applications.app_deployer import AppLookup, OnSchemaBreak, OnUpdate
from algokit_utils.applications.app_factory import (
    AppFactoryDeployResponse,
    TypedAppFactoryProtocol,
)
from algokit_utils.models import AlgoAmount, BoxIdentifier, BoxReference
from algokit_utils.models.state import TealTemplateParams
from algokit_utils.protocols import AlgorandClientProtocol
from algokit_utils.transactions import (
    AppCallMethodCallParams,
    AppCallParams,
    SendAppUpdateTransactionResult,
                      
    SendAppTransactionResult,
    SendAtomicTransactionComposerResults,
    TransactionComposer,
)
from algokit_utils.transactions.transaction_composer import BuiltTransactions
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig

_APP_SPEC_JSON = r"""{
    "arcs": [],
    "bareActions": {
        "call": [
            "DeleteApplication",
            "UpdateApplication"
        ],
        "create": [
            "NoOp"
        ]
    },
    "methods": [
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "name": "hello",
            "returns": {
                "type": "string"
            },
            "desc": "Returns Hello, {name}",
            "events": []
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "name": "hello_world_check",
            "returns": {
                "type": "void"
            },
            "desc": "Asserts {name} is \"World\"",
            "events": []
        }
    ],
    "name": "HelloWorldApp",
    "state": {
        "keys": {
            "box": {},
            "global": {},
            "local": {}
        },
        "maps": {
            "box": {},
            "global": {},
            "local": {}
        },
        "schema": {
            "global": {
                "bytes": 0,
                "ints": 0
            },
            "local": {
                "bytes": 0,
                "ints": 0
            }
        }
    },
    "structs": {},
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMQpieXRlY2Jsb2NrIDB4CnR4biBOdW1BcHBBcmdzCmludGNfMCAvLyAwCj09CmJueiBtYWluX2w2CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MDJiZWNlMTEgLy8gImhlbGxvKHN0cmluZylzdHJpbmciCj09CmJueiBtYWluX2w1CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4YmY5YzFlZGYgLy8gImhlbGxvX3dvcmxkX2NoZWNrKHN0cmluZyl2b2lkIgo9PQpibnogbWFpbl9sNAplcnIKbWFpbl9sNDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBoZWxsb3dvcmxkY2hlY2tjYXN0ZXJfNQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBoZWxsb2Nhc3Rlcl80CmludGNfMSAvLyAxCnJldHVybgptYWluX2w2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2wxMgp0eG4gT25Db21wbGV0aW9uCnB1c2hpbnQgNCAvLyBVcGRhdGVBcHBsaWNhdGlvbgo9PQpibnogbWFpbl9sMTEKdHhuIE9uQ29tcGxldGlvbgpwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KPT0KYm56IG1haW5fbDEwCmVycgptYWluX2wxMDoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KYXNzZXJ0CmNhbGxzdWIgZGVsZXRlXzEKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDExOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiB1cGRhdGVfMAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTI6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCj09CmFzc2VydAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIHVwZGF0ZQp1cGRhdGVfMDoKcHJvdG8gMCAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKcHVzaGludCBUTVBMX1VQREFUQUJMRSAvLyBUTVBMX1VQREFUQUJMRQovLyBDaGVjayBhcHAgaXMgdXBkYXRhYmxlCmFzc2VydApyZXRzdWIKCi8vIGRlbGV0ZQpkZWxldGVfMToKcHJvdG8gMCAwCnR4biBTZW5kZXIKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKcHVzaGludCBUTVBMX0RFTEVUQUJMRSAvLyBUTVBMX0RFTEVUQUJMRQovLyBDaGVjayBhcHAgaXMgZGVsZXRhYmxlCmFzc2VydApyZXRzdWIKCi8vIGhlbGxvCmhlbGxvXzI6CnByb3RvIDEgMQpieXRlY18wIC8vICIiCnB1c2hieXRlcyAweDQ4NjU2YzZjNmYyYzIwIC8vICJIZWxsbywgIgpmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKY29uY2F0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApsZW4KaXRvYgpleHRyYWN0IDYgMApmcmFtZV9kaWcgMApjb25jYXQKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gaGVsbG9fd29ybGRfY2hlY2sKaGVsbG93b3JsZGNoZWNrXzM6CnByb3RvIDEgMApmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKcHVzaGJ5dGVzIDB4NTc2ZjcyNmM2NCAvLyAiV29ybGQiCj09CmFzc2VydApyZXRzdWIKCi8vIGhlbGxvX2Nhc3RlcgpoZWxsb2Nhc3Rlcl80Ogpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgpkdXAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKY2FsbHN1YiBoZWxsb18yCmZyYW1lX2J1cnkgMApwdXNoYnl0ZXMgMHgxNTFmN2M3NSAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBoZWxsb193b3JsZF9jaGVja19jYXN0ZXIKaGVsbG93b3JsZGNoZWNrY2FzdGVyXzU6CnByb3RvIDAgMApieXRlY18wIC8vICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgaGVsbG93b3JsZGNoZWNrXzMKcmV0c3Vi",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    }
}"""
APP_SPEC = Arc56Contract.from_json(_APP_SPEC_JSON)


class HelloArgs(TypedDict):
    """TypedDict for hello arguments"""
    name: str

class HelloWorldCheckArgs(TypedDict):
    """TypedDict for hello_world_check arguments"""
    name: str


class _HelloWorldAppUpdate:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client

    def bare(self, params: AppClientBareCallWithCompilationAndSendParams | None = None) -> AppUpdateParams:
        return self.app_client.params.bare.update(params)


class _HelloWorldAppDelete:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client

    def bare(self, params: AppClientBareCallWithSendParams | None = None) -> AppCallParams:
        return self.app_client.params.bare.delete(params)


class HelloWorldAppParams:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client
    @property
    def update(self) -> "_HelloWorldAppUpdate":
        return _HelloWorldAppUpdate(self.app_client)

    @property
    def delete(self) -> "_HelloWorldAppDelete":
        return _HelloWorldAppDelete(self.app_client)
    def hello(
        self,
        args: Tuple[str] | HelloArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        first_valid_round: Optional[int] = None,
        last_valid_round: Optional[int] = None,
        
    ) -> AppCallMethodCallParams:
    
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        if method_args:
            method_args = [astuple(arg) if is_dataclass(arg) else arg for arg in method_args] # type: ignore
        
        return self.app_client.params.call(AppClientMethodCallWithSendParams(
                method="hello(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def hello_world_check(
        self,
        args: Tuple[str] | HelloWorldCheckArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        first_valid_round: Optional[int] = None,
        last_valid_round: Optional[int] = None,
        
    ) -> AppCallMethodCallParams:
    
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        if method_args:
            method_args = [astuple(arg) if is_dataclass(arg) else arg for arg in method_args] # type: ignore
        
        return self.app_client.params.call(AppClientMethodCallWithSendParams(
                method="hello_world_check(string)void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def clear_state(self, params: AppClientBareCallWithSendParams | None = None) -> AppCallParams:
        return self.app_client.params.bare.clear_state(params)


class _HelloWorldAppUpdateTransaction:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client

    def bare(self, params: AppClientBareCallWithCompilationAndSendParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.update(params)


class _HelloWorldAppDeleteTransaction:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client

    def bare(self, params: AppClientBareCallWithSendParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.delete(params)


class HelloWorldAppCreateTransactionParams:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client
    @property
    def update(self) -> "_HelloWorldAppUpdateTransaction":
        return _HelloWorldAppUpdateTransaction(self.app_client)

    @property
    def delete(self) -> "_HelloWorldAppDeleteTransaction":
        return _HelloWorldAppDeleteTransaction(self.app_client)
    def hello(
        self,
        args: Tuple[str] | HelloArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        first_valid_round: Optional[int] = None,
        last_valid_round: Optional[int] = None,
        
    ) -> BuiltTransactions:
    
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        if method_args:
            method_args = [astuple(arg) if is_dataclass(arg) else arg for arg in method_args] # type: ignore
        
        return self.app_client.create_transaction.call(AppClientMethodCallWithSendParams(
                method="hello(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def hello_world_check(
        self,
        args: Tuple[str] | HelloWorldCheckArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        first_valid_round: Optional[int] = None,
        last_valid_round: Optional[int] = None,
        
    ) -> BuiltTransactions:
    
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        if method_args:
            method_args = [astuple(arg) if is_dataclass(arg) else arg for arg in method_args] # type: ignore
        
        return self.app_client.create_transaction.call(AppClientMethodCallWithSendParams(
                method="hello_world_check(string)void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))

    def clear_state(self, params: AppClientBareCallWithSendParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(params)


class _HelloWorldAppUpdateSend:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client

    def bare(self, params: AppClientBareCallWithCompilationAndSendParams | None = None) -> SendAppTransactionResult:
        return self.app_client.send.bare.update(params)


class _HelloWorldAppDeleteSend:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client

    def bare(self, params: AppClientBareCallWithSendParams | None = None) -> SendAppTransactionResult:
        return self.app_client.send.bare.delete(params)


class HelloWorldAppSend:
    def __init__(self, app_client: AppClient):
        self.app_client = app_client
    @property
    def update(self) -> "_HelloWorldAppUpdateSend":
        return _HelloWorldAppUpdateSend(self.app_client)

    @property
    def delete(self) -> "_HelloWorldAppDeleteSend":
        return _HelloWorldAppDeleteSend(self.app_client)
    def hello(
        self,
        args: Tuple[str] | HelloArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        first_valid_round: Optional[int] = None,
        last_valid_round: Optional[int] = None,
        
    ) -> SendAppTransactionResult[str]:
    
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        if method_args:
            method_args = [astuple(arg) if is_dataclass(arg) else arg for arg in method_args] # type: ignore
        
        response = self.app_client.send.call(AppClientMethodCallWithSendParams(
                method="hello(string)string",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))
        return SendAppTransactionResult[str](**asdict(response))

    def hello_world_check(
        self,
        args: Tuple[str] | HelloWorldCheckArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        first_valid_round: Optional[int] = None,
        last_valid_round: Optional[int] = None,
        
    ) -> SendAppTransactionResult[None]:
    
        method_args = None
        
        if isinstance(args, tuple):
            method_args = list(args)
        elif isinstance(args, dict):
            method_args = list(args.values())
        if method_args:
            method_args = [astuple(arg) if is_dataclass(arg) else arg for arg in method_args] # type: ignore
        
        response = self.app_client.send.call(AppClientMethodCallWithSendParams(
                method="hello_world_check(string)void",
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
                
            ))
        return SendAppTransactionResult[None](**asdict(response))

    def clear_state(self, params: AppClientBareCallWithSendParams | None = None) -> SendAppTransactionResult[ABIReturn]:
        return self.app_client.send.bare.clear_state(params)


class HelloWorldAppState:
    """Methods to access state for the current HelloWorldApp app"""

    def __init__(self, app_client: AppClient):
        self.app_client = app_client

class HelloWorldAppClient:
    """Client for interacting with HelloWorldApp smart contract"""

    @overload
    def __init__(self, app_client: AppClient) -> None: ...
    
    @overload
    def __init__(
        self,
        *,
        algorand: AlgorandClientProtocol,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: AppClient | None = None,
        *,
        algorand: AlgorandClientProtocol | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = AppClient(
                AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = HelloWorldAppParams(self.app_client)
        self.create_transaction = HelloWorldAppCreateTransactionParams(self.app_client)
        self.send = HelloWorldAppSend(self.app_client)
        self.state = HelloWorldAppState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: AlgorandClientProtocol,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: AppLookup | None = None,
    ) -> "HelloWorldAppClient":
        return HelloWorldAppClient(
            AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: AlgorandClientProtocol,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "HelloWorldAppClient":
        return HelloWorldAppClient(
            AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> AlgorandClientProtocol:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "HelloWorldAppClient":
        return HelloWorldAppClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "HelloWorldAppComposer":
        return HelloWorldAppComposer(self)

    def decode_return_value(
        self,
        method: str,
        return_value: ABIReturn | None
    ) -> ABIValue | ABIStruct | None:
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        return return_value.get_arc56_value(arc56_method, self.app_spec.structs)


@dataclass(frozen=True)
class HelloWorldAppBareCallCreateParams(AppClientCreateSchema, AppClientBareCallParams, BaseOnCompleteParams[Literal[OnComplete.NoOpOC]]):
    """Parameters for creating HelloWorldApp contract using bare calls"""

    def to_algokit_utils_params(self) -> AppClientBareCallCreateParams:
        return AppClientBareCallCreateParams(**self.__dict__)

@dataclass(frozen=True)
class HelloWorldAppBareCallUpdateParams(AppClientBareCallParams):
    """Parameters for calling HelloWorldApp contract using bare calls"""

    def to_algokit_utils_params(self) -> AppClientBareCallParams:
        return AppClientBareCallParams(**self.__dict__)

@dataclass(frozen=True)
class HelloWorldAppBareCallDeleteParams(AppClientBareCallParams):
    """Parameters for calling HelloWorldApp contract using bare calls"""

    def to_algokit_utils_params(self) -> AppClientBareCallParams:
        return AppClientBareCallParams(**self.__dict__)

class HelloWorldAppFactory(TypedAppFactoryProtocol):
    """Factory for deploying and managing HelloWorldAppClient smart contracts"""

    def __init__(
        self,
        algorand: AlgorandClientProtocol,
        *,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        updatable: bool | None = None,
        deletable: bool | None = None,
        deploy_time_params: TealTemplateParams | None = None,
    ):
        self.app_factory = AppFactory(
            params=AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                updatable=updatable,
                deletable=deletable,
                deploy_time_params=deploy_time_params,
            )
        )
        self.params = HelloWorldAppFactoryParams(self.app_factory)
        self.create_transaction = HelloWorldAppFactoryCreateTransaction(self.app_factory)
        self.send = HelloWorldAppFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name

    @property
    def app_spec(self) -> Arc56Contract:
        return self.app_factory.app_spec

    @property
    def algorand(self) -> AlgorandClientProtocol:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        deploy_time_params: TealTemplateParams | None = None,
        on_update: OnUpdate = OnUpdate.Fail,
        on_schema_break: OnSchemaBreak = OnSchemaBreak.Fail,
        create_params: HelloWorldAppBareCallCreateParams | None = None,
        update_params: HelloWorldAppBareCallUpdateParams | None = None,
        delete_params: HelloWorldAppBareCallDeleteParams | None = None,
        existing_deployments: AppLookup | None = None,
        ignore_cache: bool = False,
        updatable: bool | None = None,
        deletable: bool | None = None,
        app_name: str | None = None,
        max_rounds_to_wait: int | None = None,
        suppress_log: bool = False,
        populate_app_call_resources: bool = False,
    ) -> tuple[HelloWorldAppClient, AppFactoryDeployResponse]:
        deploy_response = self.app_factory.deploy(
            deploy_time_params=deploy_time_params,
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            updatable=updatable,
            deletable=deletable,
            app_name=app_name,
            max_rounds_to_wait=max_rounds_to_wait,
            suppress_log=suppress_log,
            populate_app_call_resources=populate_app_call_resources,
        )

        return HelloWorldAppClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: AppLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> HelloWorldAppClient:
        """Get an app client by creator address and name"""
        return HelloWorldAppClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | bytes | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> HelloWorldAppClient:
        """Get an app client by app ID"""
        return HelloWorldAppClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class HelloWorldAppFactoryParams:
    """Parameters for creating transactions for HelloWorldApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory
        self.create = HelloWorldAppFactoryCreateParams(app_factory)
        self.deploy_update = HelloWorldAppFactoryUpdateParams(app_factory)
        self.deploy_delete = HelloWorldAppFactoryDeleteParams(app_factory)

class HelloWorldAppFactoryCreateParams:
    """Parameters for 'create' operations of HelloWorldApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> AppCreateParams:
        """Creates an instance using a bare call"""
        return self.app_factory.params.bare.create(
            AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )

    def hello(
            self,
            args: Tuple[str] | HelloArgs,
            *,
            on_complete: (Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> AppCreateMethodCallParams:
            """Creates a new instance using the hello(string)string ABI method"""
            
            method_args = None
            if isinstance(args, tuple):
                method_args = list(args)
            elif isinstance(args, dict):
                method_args = list(args.values())
            if method_args:
                method_args = [astuple(arg) if is_dataclass(arg) else arg for arg in method_args] # type: ignore
        
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="hello(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

    def hello_world_check(
            self,
            args: Tuple[str] | HelloWorldCheckArgs,
            *,
            on_complete: (Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> AppCreateMethodCallParams:
            """Creates a new instance using the hello_world_check(string)void ABI method"""
            
            method_args = None
            if isinstance(args, tuple):
                method_args = list(args)
            elif isinstance(args, dict):
                method_args = list(args.values())
            if method_args:
                method_args = [astuple(arg) if is_dataclass(arg) else arg for arg in method_args] # type: ignore
        
            return self.app_factory.params.create(
                AppFactoryCreateMethodCallParams(
                    method="hello_world_check(string)void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

class HelloWorldAppFactoryUpdateParams:
    """Parameters for 'update' operations of HelloWorldApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> AppUpdateParams:
        """Updates an instance using a bare call"""
        return self.app_factory.params.bare.deploy_update(
            AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )

class HelloWorldAppFactoryDeleteParams:
    """Parameters for 'delete' operations of HelloWorldApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> AppDeleteParams:
        """Deletes an instance using a bare call"""
        return self.app_factory.params.bare.deploy_delete(
            AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )


class HelloWorldAppFactoryCreateTransaction:
    """Create transactions for HelloWorldApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory
        self.create = HelloWorldAppFactoryCreateTransactionCreate(app_factory)

    def hello(
            self,
            args: Tuple[str] | HelloArgs,
            *,
            on_complete: (Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a transaction using the hello(string)string ABI method"""
            
            method_args = None
            if isinstance(args, tuple):
                method_args = list(args)
            elif isinstance(args, dict):
                method_args = list(args.values())
            if method_args:
                method_args = [astuple(arg) if is_dataclass(arg) else arg for arg in method_args] # type: ignore
        
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="hello(string)string",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )

    def hello_world_check(
            self,
            args: Tuple[str] | HelloWorldCheckArgs,
            *,
            on_complete: (Literal[
                    OnComplete.NoOpOC,
                    OnComplete.UpdateApplicationOC,
                    OnComplete.DeleteApplicationOC,
                    OnComplete.OptInOC,
                    OnComplete.CloseOutOC,
                ] | None) = None,
            **kwargs
        ) -> BuiltTransactions:
            """Creates a transaction using the hello_world_check(string)void ABI method"""
            
            method_args = None
            if isinstance(args, tuple):
                method_args = list(args)
            elif isinstance(args, dict):
                method_args = list(args.values())
            if method_args:
                method_args = [astuple(arg) if is_dataclass(arg) else arg for arg in method_args] # type: ignore
        
            return self.app_factory.create_transaction.create(
                AppFactoryCreateMethodCallParams(
                    method="hello_world_check(string)void",
                    args=method_args, # type: ignore
                    on_complete=on_complete,
                    **kwargs
                )
            )


class HelloWorldAppFactoryCreateTransactionCreate:
    """Create new instances of HelloWorldApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        return self.app_factory.create_transaction.bare.create(
            AppFactoryCreateParams(on_complete=on_complete, **kwargs)
        )


class HelloWorldAppFactorySend:
    """Send calls to HelloWorldApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory
        self.create = HelloWorldAppFactorySendCreate(app_factory)


class HelloWorldAppFactorySendCreate:
    """Send create calls to HelloWorldApp contract"""

    def __init__(self, app_factory: AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        on_complete: (Literal[
                OnComplete.NoOpOC,
                OnComplete.UpdateApplicationOC,
                OnComplete.DeleteApplicationOC,
                OnComplete.OptInOC,
                OnComplete.CloseOutOC,
            ] | None) = None,
        **kwargs
    ) -> tuple[HelloWorldAppClient, SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        result = self.app_factory.send.bare.create(
            AppFactoryCreateWithSendParams(on_complete=on_complete, **kwargs)
        )
        return HelloWorldAppClient(result[0]), result[1]


class _HelloWorldAppUpdateComposer:
    def __init__(self, composer: "HelloWorldAppComposer"):
        self.composer = composer


class _HelloWorldAppDeleteComposer:
    def __init__(self, composer: "HelloWorldAppComposer"):
        self.composer = composer


class HelloWorldAppComposer:
    """Composer for creating transaction groups for HelloWorldApp contract calls"""

    def __init__(self, client: "HelloWorldAppClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[Optional[Callable[[Optional[ABIReturn]], Any]]] = []

    @property
    def update(self) -> "_HelloWorldAppUpdateComposer":
        return _HelloWorldAppUpdateComposer(self)

    @property
    def delete(self) -> "_HelloWorldAppDeleteComposer":
        return _HelloWorldAppDeleteComposer(self)

    def hello(
        self,
        args: Tuple[str] | HelloArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        first_valid_round: Optional[int] = None,
        last_valid_round: Optional[int] = None,
        
    ) -> "HelloWorldAppComposer":
        method_args = None
        if isinstance(args, tuple):
            method_args = args
        elif isinstance(args, dict):
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.hello(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "hello(string)string", v
            )
        )
        return self

    def hello_world_check(
        self,
        args: Tuple[str] | HelloWorldCheckArgs,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        first_valid_round: Optional[int] = None,
        last_valid_round: Optional[int] = None,
        
    ) -> "HelloWorldAppComposer":
        method_args = None
        if isinstance(args, tuple):
            method_args = args
        elif isinstance(args, dict):
            method_args = tuple(args.values())
    
        self._composer.add_app_call_method_call(
            self.client.params.hello_world_check(
                args=method_args, # type: ignore
                account_references=account_references,
                app_references=app_references,
                asset_references=asset_references,
                box_references=box_references,
                extra_fee=extra_fee,
                first_valid_round=first_valid_round,
                lease=lease,
                max_fee=max_fee,
                note=note,
                rekey_to=rekey_to,
                sender=sender,
                signer=signer,
                static_fee=static_fee,
                validity_window=validity_window,
                last_valid_round=last_valid_round,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "hello_world_check(string)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        account_references: Optional[list[str]] = None,
        app_references: Optional[list[int]] = None,
        asset_references: Optional[list[int]] = None,
        box_references: Optional[list[Union[BoxReference, BoxIdentifier]]] = None,
        extra_fee: Optional[AlgoAmount] = None,
        lease: Optional[bytes] = None,
        max_fee: Optional[AlgoAmount] = None,
        note: Optional[bytes] = None,
        rekey_to: Optional[str] = None,
        sender: Optional[str] = None,
        signer: Optional[TransactionSigner] = None,
        static_fee: Optional[AlgoAmount] = None,
        validity_window: Optional[int] = None,
        first_valid_round: Optional[int] = None,
        last_valid_round: Optional[int] = None,
    ) -> "HelloWorldAppComposer":
        self._composer.add_app_call(
            self.client.params.clear_state(
                AppClientBareCallWithSendParams(
                    account_references=account_references,
                    app_references=app_references,
                    asset_references=asset_references,
                    box_references=box_references,
                    extra_fee=extra_fee,
                    first_valid_round=first_valid_round,
                    lease=lease,
                    max_fee=max_fee,
                    note=note,
                    rekey_to=rekey_to,
                    sender=sender,
                    signer=signer,
                    static_fee=static_fee,
                    validity_window=validity_window,
                    last_valid_round=last_valid_round,
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: Optional[TransactionSigner] = None
    ) -> "HelloWorldAppComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: int | None = None,
    ) -> SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        max_rounds_to_wait: int | None = None,
        suppress_log: bool | None = None,
        populate_app_call_resources: bool | None = None,
    ) -> SendAtomicTransactionComposerResults:
        return self._composer.send(
            max_rounds_to_wait=max_rounds_to_wait,
            suppress_log=suppress_log,
            populate_app_call_resources=populate_app_call_resources,
        )
